From: <Saved by Blink>
Snapshot-Content-Location: https://stonestoryrpg.com/stonescript/manual.html
Subject: Stonescript Manual
Date: Thu, 20 Mar 2025 02:52:54 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--2zQGwOQ50sW7AtOWHvAu407FoS4QZbNHj6KTNGMoTa----"


------MultipartBoundary--2zQGwOQ50sW7AtOWHvAu407FoS4QZbNHj6KTNGMoTa----
Content-Type: text/html
Content-ID: <frame-C08C4B53A9B7FA16FAEE8280C3696880@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://stonestoryrpg.com/stonescript/manual.html

<!DOCTYPE html><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3DUTF-8"><link rel=3D"stylesheet" type=3D"text/css" href=3D=
"cid:css-254b5648-4581-4032-b3f5-2c4c01b70250@mhtml.blink" />

<meta content=3D"Stonescript Manual" property=3D"og:title">
<meta content=3D"All instructions for Stonescript, the programming language=
 inside Stone Story RPG. Includes examples and tips to maximize your Mind S=
tone." property=3D"og:description">
<meta content=3D"https://stonestoryrpg.com/mind_stone.png" property=3D"og:i=
mage">
<meta name=3D"theme-color" content=3D"#ffffff">
<meta name=3D"twitter:card" content=3D"summary_large_image">
<link type=3D"application/json+oembed" href=3D"https://stonestoryrpg.com/fa=
q.json">=20

<title>Stonescript Manual</title>

<link rel=3D"stylesheet" href=3D"https://stonestoryrpg.com/faq-fixed.css" t=
ype=3D"text/css" media=3D"only screen and (min-device-width: 891px)">
<link rel=3D"stylesheet" href=3D"https://stonestoryrpg.com/faq-stretch.css"=
 type=3D"text/css" media=3D"only screen and (max-width: 890px)">



</head>
<body><div id=3D"content">
<f>
<div id=3D"logo"><a href=3D"https://stonestoryrpg.com/" target=3D"_blank"><=
img src=3D"https://stonestoryrpg.com/capsule_b_231x87.png" alt=3D"Stone Sto=
ry RPG" align=3D"middle"></a></div>

<div id=3D"title-separator"><!---------------------------></div>

<center>=C2=B7 =C2=B7:=C2=B7: Stonescript :=C2=B7:=C2=B7 =C2=B7</center>
<div id=3D"title-separator"><!---------------------------></div>
<center><font color=3D"#808080">v4.11.2 - 2025/02/23</font></center>
<answer><center><a href=3D"https://stonestoryrpg.com/stonescript">intro</a>=
 | manual | <a href=3D"https://stonestoryrpg.com/stonescript/beta.html">bet=
a</a>  =C2=B7:=C2=B7  <a href=3D"https://stonestoryrpg.com/releasenotes">re=
lease notes</a> | <a href=3D"https://stonestoryrpg.com/faq.html">faq</a></c=
enter></answer>
<center><font color=3D"#808080">
      _ ______________________ _           =20
  ,:=C2=B4      \____        __.---<font color=3D"#ffffff">,.</font> `.    =
    =20
 :.!  __________\_______\__`--<font color=3D"#ffffff">`=C2=B4</font>__ \   =
    =20
 :' \ \--------------------------.\ \      =20
 ':' =C2=B7 \ <font color=3D"#ffffff">=C2=B7:. :'=C2=B7 :.:=C2=B7          =
   </font>\\ \     =20
  ':' \ \ <font color=3D"#ffffff">:=C2=B7' :=C2=B7:.                 </font=
>\\ \    =20
   ':' =C2=B7 \ <font color=3D"#ffffff">.: =C2=B7:: '.:. ':'=C2=B7=C2=B7:. =
     </font>\\ \   =20
    ':' \ \ <font color=3D"#ffffff">=C2=B7 :..                    </font>\\=
 \  =20
     ':' =C2=B7 \ <font color=3D"#ffffff">:=C2=B7: ..': :=C2=B7:. =C2=B7:: =
'.     </font>\\ \ =20
      ':' \ \__________________________\\ \=20
       ':' `     .         \         .     )
        ':' . . . \ . . . . ' . . . . \ . .;
          `=C2=B7.;,;,;,;,;,;,;,;,;,;,;,;,;,;,:'=20
</font></center>
</f>
<font color=3D"#bbbbbb">
<f>Used in the Mind Stone to automate equipment choices. Stonescript is a m=
inimalistic, yet powerful language inside of <a href=3D"https://stonestoryr=
pg.com/" target=3D"_blank">Stone Story RPG</a>.</f>

<f>New to Stonescript? Consider starting at the <a href=3D"https://stonesto=
ryrpg.com/stonescript">Introduction to the Mind Stone</a> tutorial.

<f>Need help? Want to collaborate on scripts? Visit <a href=3D"https://disc=
ord.gg/StoneStoryRPG" target=3D"_blank">our Discord</a>.<f>

<f>This manual is the comprehensive reference of all available Stonescript =
features. Most of the examples can be copy/pasted directly into the Mind St=
one, which is a great way to learn how they work.</f>
</f></f></f></font>


=C2=B7:=C2=B7:=C2=B7 Index =C2=B7:=C2=B7:=C2=B7

<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#example">=
1. Example</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#basics">2=
. Basics</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#game-stat=
e">3. Game State</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#commands"=
>4. Commands</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#search-fi=
lters">5. Search Filters</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#compariso=
ns">6. Comparisons</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#variables=
">7. Variables</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#math-oper=
ations">8. Math Operations</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#functions=
">9. Functions</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#native-fu=
nctions">10. Native Functions</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#import">1=
1. Importing External Scripts</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#ascii-art=
">12. ASCII-art</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#loops">13=
. Loops</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#arrays">1=
4. Arrays</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#custom-in=
put">15. Custom Input</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#user-inte=
rface">16. User Interface</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#tips">17.=
 Tips</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#default-s=
cript">18. Default script</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#ability_i=
ds">Appendix A - Ability Cooldown IDs</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#sounds">A=
ppendix B - Sound Effects</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#music">Ap=
pendix C - Music</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#ambient">=
Appendix D - Ambient Loops</a></f>
<f>  <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#scripts">=
Appendix E - All importable scripts</a></f>


<div id=3D"example"><div id=3D"separator"><!---------------------------></d=
iv>

=C2=B7:=C2=B7:=C2=B7 Example =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
// Equips the Shovel for Rocky Plateau.
// In Caves of Fear it equips loadout 1,
//   except against the boss, where the
//   Grappling Hook and a 7 star War Hammer
//   are used instead.
// For Haunted Halls it uses two Wands,=20
//   specifying Poison for left hand and
//   Vigor for the right hand. However,
//   if the difficulty is over 5 stars it
//   uses an enchanted +13 Vigor Staff.
// Potion activates if hitpoints fall
//   below 10
<f>?loc=3Drocky
 equip shovel
?loc=3Dcave
 loadout 1
 ?foe=3Dbolesh
  equip grap
  equip hammer *7 D
?loc=3Dhalls
 equipL poison wand
 equipR vigor wand
 ?loc.stars &gt; 5
  equip vigor staff +13
?hp &lt; 10
 activate potion
</f>
</font>
<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"basics"><div id=3D"separator"><!---------------------------></di=
v>

=C2=B7:=C2=B7:=C2=B7 Basics =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
<table>
  <tbody><tr>
    <td style=3D"min-width: 3em"> ?  </td>
    <td>Evaluates a logical condition. If true, executes indented lines (if=
).<eg><br>E.g.<br>?loc =3D caves<br>  loadout 1</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> :  </td>
    <td>Alternative logical branch, in case the '?' condition is false (els=
e).<eg><br>E.g.<br>?loc =3D caves<br>  loadout 1<br>:<br>  loadout 2</eg></=
td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> :? </td>
    <td>Alternative logical branch, with additional conditions (else-if).<e=
g><br>E.g.<br>?loc =3D caves<br>  loadout 1<br>:?loc =3D deadwood<br>  load=
out 2<br>:<br>  loadout 3</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> // </td>
    <td>A comment. All text to the right of '//' has no logical effect when=
 the script executes.<eg><br>E.g.<br>?loc =3D caves<br>  loadout 1<br>//The=
 above equips loadout 1 for Caves of Fear</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> /* */ </td>
    <td>Block comment. All text between the symbols has no logical effect w=
hen the script executes.<eg><br>E.g.<br>/*<br>?loc =3D caves<br>  loadout 1=
<br>*/<br>This script does nothing, as all of it is inside the block commen=
ts.</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> ^  </td>
    <td>Continue previous line.<eg><br>E.g.<br>?loc=3Dcaves |<br>^loc =3D m=
ine<br>  equip repeating<br><br>//The above is equal to:<br>?loc=3Dcaves|lo=
c=3Dmine<br>  equip repeating</eg></td>
  </tr>
</tbody></table></font>
<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"game-state"><div id=3D"separator"><!--------------------------->=
</div>

=C2=B7:=C2=B7:=C2=B7 Game State =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
<f>These questions tell you what's happening and what's right in front of t=
he player.</f>

<table>
  <tbody><tr>
    <td>?loc</td>
    <td>The current location the player is visiting.<eg><br>E.g.<br>?loc =
=3D caves<br>  loadout 1</eg></td>
  </tr>
  <tr>
    <td>?loc.id</td>
    <td>The unique identifier of the current location.<eg><br>E.g.<br>var i=
d<br>id =3D loc.id<br>&gt;Exploring @id@</eg></td>
  </tr>
  <tr>
    <td>?loc.gp</td>
    <td>The total gear power used during the current run.<eg><br>E.g.<br>&g=
t;`0,1,Run GP =3D @loc.gp@</eg></td>
  </tr>
  <tr>
    <td>?loc.name</td>
    <td>The localized name of the current location.<eg><br>E.g.<br>&gt;Expl=
oring @loc.name@</eg></td>
  </tr>
  <tr>
    <td>?loc.stars</td>
    <td>The current location's difficulty.<eg><br>E.g.<br>?loc =3D caves<br=
>  ?loc.stars=3D4<br>    loadout 1<br>  ?loc.stars=3D5<br>    loadout 2</eg=
></td>
  </tr>
  <tr>
    <td>?loc.begin</td>
    <td>Is true only on the first frame of a location, when time =3D 0, bef=
ore any game simulation has run. Is not true after an Ouroboros loop. Usefu=
l for resetting variables.<eg><br>E.g.<br>var i<br>?loc.begin<br>  i =3D 0<=
br>  ?loc =3D caves<br>    i =3D -100</eg></td>
  </tr>
  <tr>
    <td>?loc.loop</td>
    <td>Is true on the first frame of a run after an Ouroboros loop.<eg><br=
>E.g.<br>var loopCount =3D 0<br>?loc.loop<br>  loopCount++</eg></td>
  </tr>
  <tr>
    <td>?loc.isQuest</td>
    <td>True if the current location is a special location from a Legend or=
 custom quest. False otherwise.<eg><br>E.g.<br>?loc.isQuest<br>  &gt;`0,1,W=
e're in a special quest location</eg></td>
  </tr>
  <tr>
    <td>loc.averageTime</td>
    <td>The current location's average completion time. A location's averag=
e time is calculated in a weighted manner, where the latest completion time=
 is worth more and older times are worth progressively less the older they =
are.<eg><br>E.g.<br>&gt;`0,2,Average time =3D<br>^ @loc.averageTime@ frames=
</eg></td>
  </tr>
  <tr>
    <td>loc.bestTime</td>
    <td>The current location's best completion time (your record, high-scor=
e).<eg><br>E.g.<br>&gt;`0,1,Best time =3D<br>^ @loc.bestTime@ frames</eg></=
td>
  </tr>
  <tr>
    <td>?encounter.isElite</td>
    <td>Tells you if the current encounter is an elite encounter or not.<eg=
><br>E.g.<br>&gt;`0,1,Elite =3D @encounter.isElite@</eg></td>
  </tr>
  <tr>
    <td>?encounter.eliteMod</td>
    <td>Tells you the special modifier, if any, for the current encounter.<=
eg><br>E.g.<br>&gt;`0,2,Modifier =3D @encounter.eliteMod@</eg></td>
  </tr>
  <tr>
    <td>?foe</td>
    <td>The current foe being targeted by the player.<eg><br>E.g.<br>?foe =
=3D boo<br>  equip vigor staff</eg></td>
  </tr>
  <tr>
    <td>?foe.id</td>
    <td>The unique ID (or type) of the foe being targeted by the player.</t=
d>
  </tr>
  <tr>
    <td>?foe.name</td>
    <td>The localized name of the foe being targeted by the player.</td>
  </tr>
  <tr>
    <td>?foe.damage</td>
    <td>The damage per attack of the foe being targeted by the player.<eg><=
br>E.g.<br>&gt;`0,1,foe damage =3D @foe.damage@</eg></td>
  </tr>
  <tr>
    <td>?foe.distance</td>
    <td>The distance between the player and the foe being targeted.</td>
  </tr>
  <tr>
    <td>?foe.z</td>
    <td>The z position of the foe being targeted.</td>
  </tr>
  <tr>
    <td>?foe.count</td>
    <td>The number of foes within 46 units of the player.</td>
  </tr>
  <tr>
    <td>?foe.GetCount(int)</td>
    <td>The number of foes within a specific number of units.</td>
  </tr>
  <tr>
    <td>?foe.hp</td>
    <td>The current hitpoints of the foe being targeted by the player.</td>
  </tr>
  <tr>
    <td>?foe.maxhp</td>
    <td>The maximum hitpoints of the foe being targeted by the player.</td>
  </tr>
  <tr>
    <td>?foe.armor</td>
    <td>The current armor of the foe being targeted by the player.</td>
  </tr>
  <tr>
    <td>?foe.maxarmor</td>
    <td>The maximum armor of the foe being targeted by the player.</td>
  </tr>
  <tr>
    <td>?foe.buffs.count</td>
    <td>The number of buffs (positive effects) on the foe being targeted.</=
td>
  </tr>
  <tr>
    <td>?foe.buffs.string</td>
    <td>A composite of information about all the buffs on the target foe.<e=
g><br>E.g.<br>?foe.buffs.count &gt; 0<br>  &gt;`0,3,Foe buffs =3D @foe.buff=
s.string@</eg></td>
  </tr>
  <tr>
    <td>?foe.buffs.GetCount(str)</td>
    <td>The number of a specific buff on the target foe.</td>
  </tr>
  <tr>
    <td>?foe.buffs.GetTime(str)</td>
    <td>The duration of a specific buff on the target foe.</td>
  </tr>
  <tr>
    <td>?buffs.oldest</td>
    <td>The ID of the oldest buff on the player<eg><br>E.g.<br>&gt;`0,1,Old=
est buff: @buffs.oldest@</eg></td>
  </tr>
  <tr>
    <td>?foe.debuffs.count</td>
    <td>The number of debuffs (negative effects) on the foe being targeted.=
</td>
  </tr>
  <tr>
    <td>?foe.debuffs.string</td>
    <td>A composite of information about all the debuffs on the target foe.=
<eg><br>E.g.<br>?foe.debuffs.count &gt; 0<br>  &gt;`0,4,Foe debuffs =3D @fo=
e.debuffs.string@</eg></td>
  </tr>
  <tr>
    <td>?foe.debuffs.GetCount(str)</td>
    <td>The number of a specific debuff on the target foe.<eg><br>E.g.<br>&=
gt;`0,1,Chill debuff count =3D<br>^ @foe.debuffs.GetCount("debuff_chill")@<=
/eg></td>
  </tr>
  <tr>
    <td>?foe.debuffs.GetTime(str)</td>
    <td>The duration of a specific debuff on the target foe.<eg><br>E.g.<br=
>&gt;`0,2,Chill debuff time =3D<br>^ @foe.debuffs.GetTime("debuff_chill")@<=
/eg></td>
  </tr>
  <tr>
    <td>?debuffs.oldest</td>
    <td>The ID of the oldest debuff on the player<eg><br>E.g.<br>&gt;`0,1,O=
ldest debuff: @debuffs.oldest@</eg></td>
  </tr>
  <tr>
    <td>?foe.state</td>
    <td>A number representing the target foe's current state.<eg><br>E.g.<b=
r>?foe.state =3D 0<br>  &gt;`0,0,Foe is asleep</eg></td>
  </tr>
  <tr>
    <td>?foe.time</td>
    <td>Elapsed number of frames in target foe's current state.<eg><br>E.g.=
<br>&gt;`0,0,Foe =3D @foe.name@:@foe.state@,@foe.time@</eg></td>
  </tr>
  <tr>
    <td>?foe.level</td>
    <td>The level number of the target foe.<eg><br>E.g.<br>&gt;`0,0,Foe =3D=
 @foe.name@ is level @foe.level@</eg></td>
  </tr>
  <tr>
    <td>?harvest</td>
    <td>The next harvestable object, such as a tree or boulder.<eg><br>E.g.=
<br>?harvest=3DBoulder<br>  equip shovel</eg></td>
  </tr>
  <tr>
    <td>?harvest.distance</td>
    <td>The distance between the player and the nearest harvestable object.=
<eg><br>E.g.<br>?loc=3DRocky &amp; harvest.distance &lt; 7<br>  equip shove=
l</eg></td>
  </tr>
  <tr>
    <td>?harvest.z</td>
    <td>The z position of the nearest harvestable object.<eg><br>E.g.<br>?l=
oc=3DRocky &amp; harvest.z &gt; 5<br>  equip shovel</eg></td>
  </tr>
  <tr>
    <td>?input.x</td>
    <td>The X position, on the ASCII grid, of the input device (mouse/touch=
).</td>
  </tr>
  <tr>
    <td>?input.y</td>
    <td>The Y position, on the ASCII grid, of the input device (mouse/touch=
).<eg><br>E.g.<br>&gt; (@input.x@, @input.y@)</eg></td>
  </tr>
  <tr>
    <td>?item.left</td>
    <td>The item equipped to the left hand.<eg><br>E.g.<br>&gt;`0,1,Left:@i=
tem.left@<br>&gt;`0,2,Right:@item.right@</eg></td>
  </tr>
  <tr>
    <td>?item.right</td>
    <td>The item equipped to the right hand.<eg><br>E.g.<br>?item.right =3D=
 quarterstaff<br>  activate R</eg></td>
  </tr>
  <tr>
    <td>?item.left.gp<br>?item.right.gp</td>
    <td>The gear power value of the item equipped to the left or right hand=
.<eg><br>E.g.<br>&gt;`0,1,Left GP:@item.left.gp@<br>&gt;`0,2,Right GP:@item=
.right.gp@</eg></td>
  </tr>
  <tr>
    <td>?item.left.id<br>?item.right.id</td>
    <td>The ID of the item equipped to the left or right hand.<eg><br>E.g.<=
br>&gt;`0,1,Left ID:@item.left.id@<br>&gt;`0,2,Right ID:@item.right.id@</eg=
></td>
  </tr>
  <tr>
    <td>?item.left.state<br>?item.left.time<br>?item.right.state<br>?item.r=
ight.time</td>
    <td>The numeric representation for an equipped weapon's current state a=
nd elapsed frames within that state.<eg><br>E.g.<br>&gt;`0,1,@item.left.sta=
te@:@item.left.time@<br>&gt;`0,2,@item.right.state@:@item.right.time@</eg><=
/td>
  </tr>
  <tr>
    <td>?item.potion</td>
    <td>The potion currently brewed. Includes "auto" if auto-refill is enab=
led on the Cauldron.<eg><br>E.g.<br>?item.potion ! empty &amp; item.potion =
=3D auto<br>  activate potion</eg></td>
  </tr>
  <tr>
    <td>?pickup</td>
    <td>The current pickup being targeted by the player.<eg><br>E.g.<br>?pi=
ckup<br>  equip star stone<br>:<br>  loadout 1</eg></td>
  </tr>
  <tr>
    <td>?pickup.distance</td>
    <td>The distance between the player and the pickup being targeted.<eg><=
br>E.g.<br>?pickup.distance &lt; 5<br>  equipL star stone</eg></td>
  </tr>
  <tr>
    <td>?pickup.z</td>
    <td>The z position of the pickup being targeted.<eg><br>E.g.<br>?pickup=
.z &gt; 7<br>  equipL star stone</eg></td>
  </tr>
  <tr>
    <td>?armor</td>
    <td>The player's current armor, rounded down.<br>E.g. if the armor says=
 [2.4] ?armor evaluates to 2.</td>
  </tr>
  <tr>
    <td>?armor.f</td>
    <td>The player's current armor's fractional amount.<br>E.g. if the armo=
r says [2.4] ?armor.f evaluates to 4.</td>
  </tr>
  <tr>
    <td>?buffs.count</td>
    <td>The number of buffs (positive effects) on the player.</td>
  </tr>
  <tr>
    <td>?buffs.string</td>
    <td>A composite of information about all buffs on the player.<eg><br>E.=
g.<br>?buffs.count &gt; 0<br>  &gt;`0,1,Player buffs =3D @buffs.string@</eg=
></td>
  </tr>
  <tr>
    <td>?buffs.GetCount(str)</td>
    <td>The number of a specific buff on the player.</td>
  </tr>
  <tr>
    <td>?buffs.GetTime(str)</td>
    <td>The duration of a specific buff on the player.</td>
  </tr>
  <tr>
    <td>?debuffs.count</td>
    <td>The number of debuffs (negative effects) on the player.</td>
  </tr>
  <tr>
    <td>?debuffs.string</td>
    <td>A composite of information about all debuffs on the player.<eg><br>=
E.g.<br>?debuffs.count &gt; 0<br>  &gt;`0,2,Player debuffs =3D @debuffs.str=
ing@</eg></td>
  </tr>
  <tr>
    <td>?debuffs.GetCount(str)</td>
    <td>The number of a specific debuff on the player.</td>
  </tr>
  <tr>
    <td>?debuffs.GetTime(str)</td>
    <td>The duration of a specific debuff on the player.</td>
  </tr>
  <tr>
    <td>?hp</td>
    <td>The player's current hitpoints.</td>
  </tr>
  <tr>
    <td>?maxhp</td>
    <td>The player's maximum hitpoints.</td>
  </tr>
  <tr>
    <td>?maxarmor</td>
    <td>The player's maximum armor, rounded down.</td>
  </tr>
  <tr>
    <td>?pos.x</td>
    <td>The player's current X position.</td>
  </tr>
  <tr>
    <td>?pos.y</td>
    <td>The player's current Y position.</td>
  </tr>
  <tr>
    <td>?pos.z</td>
    <td>The player's current Z position.</td>
  </tr>
  <tr>
    <td>?ai.enabled</td>
    <td>True if the AI is on, False if the AI is off (e.g. during a cinemat=
ic moment).</td>
  </tr>
  <tr>
    <td>?ai.paused</td>
    <td>True if the AI is temporarily suspended, such as when waiting for a=
 treasure to drop.</td>
  </tr>
  <tr>
    <td>?ai.idle</td>
    <td>True if the player is idle, waiting for something such as an attack=
 to complete.</td>
  </tr>
  <tr>
    <td>?ai.walking</td>
    <td>True if the player is moving.</td>
  </tr>
  <tr>
    <td>?bighead</td>
    <td>True if the player has Big Head enabled (Moondial).</td>
  </tr>
  <tr>
    <td>?face</td>
    <td>The player's current facial expression.<eg><br>E.g.<br>?face =3D "^=
^"<br>  &gt;Happy</eg></td>
  </tr>
  <tr>
    <td>?key</td>
    <td>The state of <a href=3D"https://stonestoryrpg.com/stonescript/manua=
l.html#custom-input">custom game input</a>.<eg><br>The following prints the=
 current input:<br>&gt;@key@</eg></td>
  </tr>
  <tr>
    <td>?res.stone<br>?res.wood<br>?res.tar<br>?res.ki<br>?res.bronze<br>?r=
es.crystals</td>
    <td>The player's current amount of resources in their inventory.<eg><br=
>E.g.<br>?loc =3D Deadwood<br>  &gt;Wood =3D @res.wood@<br><br>E.g.2<br>&gt=
;`0,1,#magenta, =E2=99=A6 @res.crystals@</eg></td>
  </tr>
  <tr>
    <td>?player.direction</td>
    <td>Indicates the direction in which the player is facing. Returns a va=
lue of 1 for <eg>right</eg> and -1 for <eg>left</eg>.<eg><br>E.g.<br>?playe=
r.direction =3D 1<br>  &gt;`0,0,Walking right<br>:<br>  &gt;`0,0,Walking le=
ft</eg></td>
  </tr>
  <tr>
    <td>player.framesPerMove</td>
    <td>The amount of frames it takes the player to move one position forwa=
rd.<eg><br>&gt;`0,1,Player Movement: @player.framesPerMove@</eg></td>
  </tr>
  <tr>
    <td>player.name</td>
    <td>The name chosen by the player.<eg><br>This example prints the playe=
r's name above their head:<br>var name<br>var x<br>name =3D player.name<br>=
x =3D string.Size(name) / -2<br>&gt;o@x@,-2,@name@</eg></td>
  </tr>
  <tr>
    <td>player.GetNextLegendName()</td>
    <td>The next unlocked Legend quest the player hasn't completed yet.<eg>=
</eg></td>
  </tr>
  <tr>
    <td>?rng</td>
    <td>Returns a random integer between 0 and 9999.<eg><br>E.g.<br>?rng &l=
t; 5000<br>  &gt;Heads!<br>:<br>  &gt;Tails!<br><br>E.g.2: Generates a rand=
om integer between 5 and 24:<br>var min =3D 5<br>var max =3D 24<br>var n =
=3D min + rng % (max - min + 1)</eg></td>
  </tr>
  <tr>
    <td>?rngf</td>
    <td>Returns a random floating-point number between 0 and 1.<eg><br>E.g.=
<br>&gt;random float =3D @rngf@<br><br>E.g.2: Generates a random float betw=
een 5.0 and 24.0:<br>var min =3D 5.0<br>var max =3D 24.0<br>var n =3D min +=
 (max - min) * rngf</eg></td>
  </tr>
  <tr>
    <td>?screen.i</td>
    <td>The screen's position in-game, as an index that increses when the p=
layer reaches the right-side and it slides over.<eg><br>E.g.<br>&gt;`0,0,Sc=
reen index =3D @screen.i@</eg></td>
  </tr>
  <tr>
    <td>?screen.x</td>
    <td>The screen's position in-game.<eg><br>E.g.<br>&gt;`0,0,Screen posit=
ion X =3D @screen.x@</eg></td>
  </tr>
  <tr>
    <td>?screen.w</td>
    <td>The width of the screen's ASCII grid.<eg><br>E.g.<br>var sw =3D scr=
een.w<br>&gt;Screen width =3D @sw@</eg></td>
  </tr>
  <tr>
    <td>?screen.h</td>
    <td>The height of the screen's ASCII grid.<eg><br>E.g.<br>var sh =3D sc=
reen.h<br>&gt;Screen height =3D @sh@</eg></td>
  </tr>
  <tr>
    <td>?summon.count</td>
    <td>The number of summoned allies currently in game.<eg><br>E.g.<br>?su=
mmon.count =3D 0 &amp;<br>^ item.CanActivate()<br>  equipL talisman<br>  ac=
tivate L</eg></td>
  </tr>
  <tr>
    <td>summon.GetId(index =3D 0)</td>
    <td>Returns the ID of the summon at a given index. The index parameter =
is optional and defaults to zero (first summon). Returns null if no summons=
 are at that index.<eg><br>E.g.<br>?summon.GetId() ! "cinderwisp" &amp;<br>=
^ item.CanActivate()<br>  equipR fire talisman<br>  activate R</eg></td>
  </tr>
  <tr>
    <td>summon.GetName(index =3D 0)</td>
    <td>Returns the localized name of the summon at a given index. The inde=
x parameter is optional and defaults to zero (first summon). Returns null i=
f no summons are at that index.<eg><br>E.g.<br>&gt;`0,1,Summon:@summon.GetN=
ame()@</eg></td>
  </tr>
  <tr>
    <td>summon.GetVar(varName,<br>index =3D 0)</td>
    <td>Returns the value for a custom variable on a summon. Different type=
s of summons expose different variables, based on their unique abilities. T=
he index parameter is optional and defaults to zero (first summon). Returns=
 null if no summons are at that index. Shows an error if <f>varName</f> doe=
s not correspond to a valid variable.<eg><br>E.g.<br>?summon.GetId() =3D ci=
nderwisp &amp;<br>^summon.GetVar("ignition") &gt; 2<br>  activate cinderwis=
p</eg></td>
  </tr>
  <tr>
    <td>summon.GetState(index =3D 0)</td>
    <td>Returns a number representing the current state of a summon. The in=
dex parameter is optional and defaults to zero (first summon). Returns -1 i=
f no summons are at that index.<eg><br>E.g.<br>&gt;`0,1,Summon state:@summo=
n.GetState()@</eg></td>
  </tr>
  <tr>
    <td>summon.GetTime(index =3D 0)</td>
    <td>Returns the elapsed number of frames in the current state of a summ=
on. The index parameter is optional and defaults to zero (first summon). Re=
turns -1 if no summons are at that index.<eg><br>E.g.<br>&gt;`0,1,Summon ti=
me:@summon.GetTime()@</eg></td>
  </tr>
  <tr>
    <td>?totalgp</td>
    <td>The total "Gear Power" of your inventory, calculated from item star=
 levels and enchantment bonuses.<eg><br>E.g.<br>&gt;My gear power =3D @tota=
lgp@</eg></td>
  </tr>
  <tr>
    <td>?time</td>
    <td>The current frame number of the location.<eg><br>E.g.<br>?time % 30=
0 =3D 0<br>  &gt;Every 10 seconds you'll see this message</eg></td>
  </tr>
  <tr>
    <td>?totaltime</td>
    <td>The current frame number of the location, accumulated in case of bo=
ss sub-location.<eg><br>E.g.<br>&gt;`0,0,Current time =3D @totaltime@ frame=
s</eg></td>
  </tr>
  <tr>
    <td>time.msbn</td>
    <td>Unix time represents the number of milliseconds that have elapsed s=
ince<br>1970-01-01T00:00:00Z (January 1, 1970, at 12:00 AM UTC). It does no=
t take leap seconds into account. Returns a BigNumber<eg><br>E.g.<br>&gt;@t=
ime.msbn@</eg></td>
  </tr>
  <tr>
    <td>time.year, time.month, time.day, time.hour, time.minute, time.secon=
d</td>
    <td>The local system time on the player's computer.<eg><br>E.g.<br>&gt;=
`0,0,@time.year@/@time.month@/@time.day@<br>^ @time.hour@:@time.minute@:@ti=
me.second@</eg></td>
  </tr>
  <tr>
    <td>utc.year, utc.month, utc.day, utc.hour, utc.minute, utc.second</td>
    <td>The current UTC time.<eg><br>E.g.<br>var utcZ =3D utc.year*356*12*2=
4*30 +<br>^utc.month*12*24 + utc.day*24+utc.hour<br>var timeZ =3D time.year=
*356*12*24*30 +<br>^time.month*12*24 + time.day*24+time.hour<br>var timeZon=
e =3D timeZ - utcZ<br>?timeZone &lt; 0<br>  &gt;`0,0,Time Zone: UTC@timeZon=
e@<br>:<br>  &gt;`0,0,Time Zone: UTC+@timeZone@</eg></td>
  </tr>
</tbody></table></font>
<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"commands"><div id=3D"separator"><!---------------------------></=
div>

=C2=B7:=C2=B7:=C2=B7 Commands =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
These tell the game to do something.

<table>
  <tbody><tr>
    <td>activate (ability)</td>
    <td>Activates an item ability. (ability) can have these values: potion,=
 P, left, L, right, R. Also works with ability IDs<eg><br>E.g.<br>activate =
R<br>(activates the ability of the item equipped on the right side, such as=
 the Hatchet)</eg></td>
  </tr>
  <tr>
    <td>brew (ingredients)</td>
    <td>Refills the potion bottle to the specified combination of ingredien=
ts. Executes only at the beginning of a run, at time 0. Ingredients can be =
<eg>stone</eg>, <eg>wood</eg>, <eg>tar</eg> or <eg>bronze</eg> and should b=
e separated by <eg>+</eg>. Ingredient names can be written in English or in=
 the language selected in the settings.<eg><br>E.g.<br>?loc.begin<br>  brew=
 bronze + tar</eg></td>
  </tr>
  <tr>
    <td>equip  (str)</td>
    <td>Equips an item. (str) has a limit of 7 criteria. Two-handed items m=
ust use this form of the equip command.<eg><br>E.g.<br>equip vigor crossbow=
 *8 +5</eg></td>
  </tr>
  <tr>
    <td>equipL (str)</td>
    <td>Equips an item to the left hand that best fits the given criteria.<=
eg><br>E.g.<br>equipL poison d_sword</eg></td>
  </tr>
  <tr>
    <td>equipR (str)</td>
    <td>Equips an item to the right hand that best fits the given criteria.=
<eg><br>E.g.<br>equipR vigor shield</eg></td>
  </tr>
  <tr>
    <td>equip @var@</td>
    <td>Equips an item based on criteria from a string variable. Equip and =
other item search commands support subtractive criteria.<eg><br>E.g.<br>var=
 weaponName =3D "poison sword *10 -big"<br>equipR @weaponName@</eg></td>
  </tr>
  <tr>
    <td>loadout (n)</td>
    <td>Equips a specific loadout number.<eg><br>E.g.<br>?loc =3D caves<br>=
  loadout 1<br>?loc =3D deadwood<br>  loadout 2</eg></td>
  </tr>
  <tr>
    <td>&gt; (str)</td>
    <td>Prints a string to the top of the screen.<eg><br>E.g.<br>&gt;Hello =
World!</eg></td>
  </tr>
  <tr>
    <td>&gt; @varName@</td>
    <td>Prints a string with the value of a variable inserted. Multiple var=
iables can be inserted into a single print. To insert, surround the variabl=
e's name with @.<eg><br>The following example prints information about the =
currently targeted foe:<br>var foeInfo<br>foeInfo =3D foe<br>&gt;FOE =3D @f=
oeInfo@</eg></td>
  </tr>
  <tr>
    <td>&gt;(abcd</td>
    <td>Shows a custom facial expression on the player. Requires Big Head.<=
eg><br>E.g.<br>&gt;( OwO</eg></td>
  </tr>
  <tr>
    <td>&gt;oX,Y,[#rrggbb,](str)</td>
    <td>Advanced print relative to the player's position. X and Y are the c=
oordinate offsets. #rrggbb is the color of the text in <a href=3D"https://h=
tmlcolorcodes.com/" target=3D"_blank">hexadecimal notation</a>. Color can a=
lso be set with these constants: #white, #cyan, #yellow, #green, #blue and =
#red. To print in rainbow use #rainFF where the last 2 characters define th=
e brightness.<eg><br>The following example writes "Let's go!" in red font, =
relative to the player's position, 6 to the left and 3 down:<br>&gt;o-6,3,#=
red,Let's go!</eg></td>
  </tr>
  <tr>
    <td>&gt;hX,Y,[#rrggbb,](str)</td>
    <td>Similar to "&gt;o", however, draws on the same layer as the Big Hea=
d. Ideal for accessories such as hats.<eg><br>The following draws a yellow =
hat on the player. Works best if Big Head is enabled:<br>&gt;h-2,-3,#yellow=
,ascii<br>##_<br>#| |<br>_|_|_<br>asciiend</eg></td>
  </tr>
  <tr>
    <td>&gt;`X,Y,[#rrggbb,](str)</td>
    <td>Advanced print relative to the upper-left corner of the screen.<eg>=
<br>The following prints "Hello World!", but uses variables for the coordin=
ates and the color:<br>var posX =3D 10<br>var posY =3D 5<br>var color =3D r=
ainE1<br>&gt;`@posX@,@posY@,#@color@,Hello World!</eg></td>
  </tr>
  <tr>
    <td>&gt;cX,Y,[#rrggbb,](str)</td>
    <td>Advanced print relative to the center of the screen. Similar to "&g=
t;`". Note that in all these the color is optional.<eg><br>This example dem=
onstrates how the color is optional and defaults to white:<br>&gt;c0,0,Hell=
o World!</eg></td>
  </tr>
  <tr>
    <td>&gt;fX,Y,[#rrggbb,](str)</td>
    <td>Advanced print relative to the target foe's head position.<eg><br>T=
he following draws a red crosshairs on the targeted foe:<br>&gt;f-2,0,#ff00=
00,ascii<br>##!<br>-#=C2=B7#-<br>##=C2=A1<br>asciiend</eg></td>
  </tr>
  <tr>
    <td>var (variable)</td>
    <td>Declares a variable that can be used in math, logical and string op=
erations. See the <a href=3D"https://stonestoryrpg.com/stonescript/manual.h=
tml#variables">variables section</a> for details about their lifecycle and =
behavior, that may differ from other languages.<eg><br>E.g.<br>var message =
=3D Hello World!<br>&gt;@message@</eg></td>
  </tr>
  <tr>
    <td>func (function)</td>
    <td>Declares a <a href=3D"https://stonestoryrpg.com/stonescript/manual.=
html#functions">function</a> that can be called later.<eg><br>E.g.<br>func =
Print(message)<br>  &gt;@message@<br><br>Print(Hello World!)</eg></td>
  </tr>
  <tr>
    <td>for v =3D a..b</td>
    <td>Creates a <a href=3D"https://stonestoryrpg.com/stonescript/manual.h=
tml#loops">loop</a> that iterates a variable 'v' from value 'a' to value 'b=
'. Code that appears inside the loop's scope will run multiple times.<eg><b=
r>E.g.<br>var a<br>a =3D 0<br>for i =3D 1..5<br>  a =3D a + i<br>&gt;a =3D =
@a@</eg></td>
  </tr>
  <tr>
    <td>import (script)</td>
    <td>Loads and executes a singular copy of an <a href=3D"https://stonest=
oryrpg.com/stonescript/manual.html#import">external script</a>.<eg><br>This=
 example imports the fishing mini-game located at<br>(save-file folder)/Sto=
nescript/Fishing.txt<br><br>import Fishing</eg></td>
  </tr>
  <tr>
    <td>new (script)</td>
    <td>Loads and executes an <a href=3D"https://stonestoryrpg.com/stonescr=
ipt/manual.html#import">external script</a> similar to 'import'. However, o=
bjects loaded with 'new' are each an individual copy and their script body =
will only execute one time.<eg><br>This example creates and prints a vector=
 object:<br>var v =3D new Components/Vector<br>v.Init(10, 5)<br>&gt;Vector =
=3D @v@</eg></td>
  </tr>
  <tr>
    <td>disable abilities</td>
    <td>Prevents activation of potion and weapon abilities. Also greys out =
the HUD buttons.</td>
  </tr>
  <tr>
    <td>enable abilities</td>
    <td>Restores activation of abilities that were disabled by a previous c=
all to "disable abilities".</td>
  </tr>
  <tr>
    <td>disable banner</td>
    <td>Prevents rendering of the horizontal banner that appears with the l=
ocation name at the beginning and end of a location.</td>
  </tr>
  <tr>
    <td>enable banner</td>
    <td>Restores rendering of the horizontal banner with location name.</td=
>
  </tr>
  <tr>
    <td>disable hud (opts)</td>
    <td>Hides and disables the gameplay user interface elements. Accepts op=
tional parameters, specifying the set of elements to disable: p =3D player =
health and debuffs, f =3D foe health and debuffs, a =3D ability buttons, r =
=3D resources, b =3D banner, u =3D utility belt.<eg><br>E.g.<br>disable hud=
 // Disables all hud elements<br>E.g.2<br>disable hud ru // Disables only r=
esources (r) and utility belt (u)</eg></td>
  </tr>
  <tr>
    <td>enable hud (opts)</td>
    <td>Brings back the user interface elements hidden by previous "disable=
 hud" commands. Accepts the same optional parameters as the disable command=
.</td>
  </tr>
  <tr>
    <td>disable loadout input</td>
    <td>Prevents weapon loadouts from being saved or recalled with input ke=
ys.</td>
  </tr>
  <tr>
    <td>enable loadout input</td>
    <td>Restores the saving or recalling of weapon loadouts by means of inp=
ut keys.</td>
  </tr>
  <tr>
    <td>disable loadout print</td>
    <td>Hides the messages that appear when a loadout is recalled.</td>
  </tr>
  <tr>
    <td>enable loadout print</td>
    <td>Brings back the printing of loadout messages.</td>
  </tr>
  <tr>
    <td>disable npcDialog</td>
    <td>Hides and auto-skips NPC dialog bubbles.</td>
  </tr>
  <tr>
    <td>enable npcDialog</td>
    <td>Brings back NPC dialog bubbles.</td>
  </tr>
  <tr>
    <td>disable pause</td>
    <td>Hides the pause button user interface. Pause is still available wit=
h the [P] shortcut.</td>
  </tr>
  <tr>
    <td>enable pause</td>
    <td>Brings back the pause button hidden by a previous "disable pause" c=
ommand.</td>
  </tr>
  <tr>
    <td>disable player</td>
    <td>Hides the player. Has no effect on combat, this is only cosmetic.</=
td>
  </tr>
  <tr>
    <td>enable player</td>
    <td>Brings back the player rendering if it was hidden by a previous "di=
sable player" command.</td>
  </tr>
  <tr>
    <td>play (sound) (pitch)</td>
    <td>Plays a <a href=3D"https://stonestoryrpg.com/stonescript/manual.htm=
l#sounds">sound effect</a> with an optional pitch value. The pitch default =
value is 100 with higher numbers increasing the pitch and smaller numbers l=
owering it.<eg><br>E.g.<br>?key =3D primary<br>  play buy<br>?key =3D up<br=
>  play buy 200<br><br>E.g.2:<br>var pitch<br>?time%30 =3D 0<br>  pitch =3D=
 rng/100 + 50<br>  &gt;@pitch@<br>  play buy @pitch@</eg></td>
  </tr>
</tbody></table></font>
<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"search-filters"><div id=3D"separator"><!------------------------=
---></div>

=C2=B7:=C2=B7:=C2=B7 Search Filters =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
These are used when evaluating foes, locations and items.

<eg><f>E.g.:
?foe =3D insect | foe =3D poison
  loadout 3</f></eg>

poison
vigor
aether
fire
air
ice
arachnid
serpent
insect
machine
humanoid
elemental
boss
phase1
phase2
phase3
spawner
flying
slow
ranged
explode
swarm
unpushable
undamageable
magic_resist
magic_vulnerability
immune_to_stun
immune_to_ranged
immune_to_debuff_damage
immune_to_physical
*[number]  star level (location or item)
+[number]  enchantment bonus (item only)
</font>

<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"comparisons"><div id=3D"separator"><!---------------------------=
></div>

=C2=B7:=C2=B7:=C2=B7 Comparisons =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
<f>Used in conjunction with game state to make decisions</f>

<table>
  <tbody><tr>
    <td style=3D"min-width: 3em"> =3D</td>
    <td>Compares values equal or string contains.<eg><br>E.g.<br>?hp =3D ma=
xhp<br>  loadout 2</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> !</td>
    <td>Compares values not equal or string does not contain.<eg><br>E.g.<b=
r>?foe ! poison<br>  equipL sword</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> &amp;</td>
    <td>Logical AND operator.<eg><br>E.g.<br>?loc=3Dcaves &amp; foe=3Dboss<=
/eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> |</td>
    <td>Logical OR operator. If '&amp;' and '|' are mixed in a single compl=
ex expression, all '&amp;' operate first.<eg><br>E.g.<br>?foe=3Dslow | foe.=
count&gt;3<br>  activate potion</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> &gt;</td>
    <td>Greater-than compare. Can be used with a location's difficulty, num=
ber of foes, health, etc.<eg><br>E.g.<br>?foe.count &gt; 10<br>  equip shin=
y bardiche</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> &lt;</td>
    <td>Less-than compare.<eg><br>E.g.<br>?hp &lt; 6<br>  activate potion</=
eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> &gt;=3D</td>
    <td>Greater-than or equal compare. The combination of '&gt;' and '=3D' =
into a single comparison.<eg><br>The following two examples are equivalent:=
<br><br>?loc.stars &gt;=3D 6<br>  equipR vigor shield<br><br>?loc.stars &gt=
; 6 | loc.stars =3D 6<br>  equipR vigor shield</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> &lt;=3D</td>
    <td>Less-than or equal compare. The combination of '&lt;' and '=3D' int=
o a single comparison.<eg><br>E.g.<br>?hp &lt;=3D 6<br>  activate potion</e=
g></td>
  </tr>
</tbody></table></font>
<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"variables"><div id=3D"separator"><!---------------------------><=
/div>

=C2=B7:=C2=B7:=C2=B7 Variables =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
Variables are a way of storing value to use later. Declare a new variable w=
ith the keyword 'var'.

<eg>E.g.:
var myVar =3D 10</eg>
(myVar is the name of the variable, and it's initialized with value 10)

<eg>myVar =3D myVar + 5</eg>
(myVar now equals 15)

<eg>var secondVar =3D 3
myVar =3D myVar - secondVar</eg>
(Many variables can be combined in math operations. myVar now equals 12)


When a variable is declared it is initialized only once, the first time 'va=
r' executes.

<eg>E.g.:
var i =3D 0
i++
&gt;i =3D @i@</eg>
In this example, variable 'i' is declared and starts with value 0. During e=
ach frame of the run, the value of 'i' increases by 1 and then is printed t=
o the screen.

Variables only reset to their initial value if you leave a location and beg=
in a new run manually. They do not reset when the Ouroboros loops or when t=
he Mind Stone is opened then closed again.

String variables can optionally be declared with quotes. This allows specia=
l symbols and trailing spaces.
<eg>E.g.:
var a =3D 10
var b =3D 5
var myVar =3D a + " x " + b + " =3D " + (a * b)
&gt;@myVar@</eg>
(This example also demonstrates how to join strings with the '+' operator)

Variables in imported scripts are contained within those scripts and their =
names won't collide with variables or functions in other scripts.
</font>

<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"math-operations"><div id=3D"separator"><!-----------------------=
----></div>

=C2=B7:=C2=B7:=C2=B7 Math Operations =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
<f>Operators modify numbers. Can be used in conjunction with variables or d=
irectly in game state expressions.</f>

<table>
  <tbody><tr>
    <td style=3D"min-width: 3em"> +</td>
    <td>Adds two numbers or variables together.<eg><br>E.g.:<br>var a =3D 2=
 + 3<br>(a equals 5)</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> -</td>
    <td>Subtracts two numbers or variables from each other.<eg><br>E.g.:<br=
>?hp &lt; maxhp - 5<br>  equip vigor sword dL</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> *</td>
    <td>Multiplies two numbers or variables together.<eg><br>E.g.:<br>var a=
 =3D 2<br>var b =3D 5<br>a =3D a * b<br>// a equals 10<br><br>E.g.2:<br>var=
 a =3D 2 * 0.4<br>// a equals 0.8</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> /</td>
    <td>Divides one number or variable by another. In the case of integers,=
 the result is rounded down.<eg><br>E.g.:<br>var a =3D 8<br>a =3D a / 4<br>=
// a equals 2<br><br>E.g.2:<br>var a =3D 5.0<br>a =3D a / 2<br>// a equals =
2.5</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> ++</td>
    <td>Increments a variable.<eg><br>E.g.:<br>var a =3D 3<br>a++<br>// a e=
quals 4</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> --</td>
    <td>Decrements a variable.<eg><br>E.g.:<br>var a =3D 3<br>a--<br>// a e=
quals 2</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> %</td>
    <td>Modulo. Gives the remainder of dividing one number by another.<eg><=
br>E.g.:<br>var a =3D 5 % 4<br>(a equals 1)<br><br>E.g.2:<br>?time % 8 &lt;=
 4<br>  &gt; \O)<br>?time % 8 &gt; 3<br>  &gt; (O/<br>// this draws an anim=
ated emoji</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> ( )</td>
    <td>Parenthesis can be used to prioritize operations.<eg><br>E.g.:<br>v=
ar a =3D 2 * (3 - 1)<br>// a equals 4</eg></td>
  </tr>
  <tr>
    <td style=3D"min-width: 3em"> !</td>
    <td>Negation. Inverts the value when used in front of a boolean express=
ion.<eg><br>E.g.:<br>? !ai.enabled<br>  &gt;The AI is not enabled.</eg></td=
>
  </tr>
</tbody></table></font>
<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"functions"><div id=3D"separator"><!---------------------------><=
/div>

=C2=B7:=C2=B7:=C2=B7 Functions =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
Custom functions serve an important organizational purpose to scripts as th=
ey grow in complexity. They make scripts easier to read and reduce repetiti=
on. When a function is declared its contents are not executed immediately. =
Instead, lines of script inside a function execute when the function is cal=
led at a later point.

This example creates a counter that increases by 1 each frame. When any cus=
tom input key is pressed, ResetCounter() is called and the counter value go=
es back to zero:
<f><eg>
var count =3D 0
count++
&gt;Counter =3D @count@

func ResetCounter()
  count =3D 0

?key=3Dbegin
  ResetCounter()
</eg>
Another aspect of functions is that they can return a value. In this exampl=
e we declare a simple function that calculates the duration of the main loc=
ation (non-boss area):
<eg>
func NonBossDuration()
  return totalTime - time

var duration
duration =3D NonBossDuration()
&gt;Time was: @duration@
</eg>
Functions also accept any number of arguments/parameters, making them even =
more powerful, with the ability to operate on arbitrary input. Here, we dec=
lare a utility function that generates a random number within a range, then=
 we use it to generate random numbers between 5 and 10:
<eg>
func RandomRange(min, max)
  ?min &gt;=3D max
    return min
  return min + rng % (max - min + 1)

var randomValue
randomValue =3D RandomRange(5, 10)
&gt;RNG: @randomValue@
</eg>
The prefix 'this' can be used inside a funtion when referencing variables t=
hat belong to the outside script. Use of 'this' is optional, and script var=
iables can be accessed by a function without the prefix. However, in the fo=
llowing example the variable 'a' appears both inside and outside of the fun=
ction, so 'this.a' is used for differentiation:
<eg>
var a =3D 1
func TestScope(a)
  &gt;Script var =3D @this.a@, function var =3D @a@

TestScope(3)
</eg>
When functions call other functions, or themselves, this creates an executi=
on stack that can build in size until the application crashes. To safeguard=
 computer resources Stonescript has a stack limit of 215 and will throw an =
error if the limit is exceeded.
</f></font>

<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"native-functions"><div id=3D"separator"><!----------------------=
-----></div>

=C2=B7:=C2=B7:=C2=B7 Native Functions =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
While scripts can define their own functions, Stonescript comes with a set =
of pre-defined/native functions that behave similar to commands, but differ=
 in that they are more clearly grouped by subject, can accept parameters an=
d sometimes return a value.

<table>
  <tbody><tr><td>ambient<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=
=E2=80=BE=E2=80=BE</td></tr>
  <tr>
    <td>?ambient<br><eg>Return string</eg></td>
    <td>Returns a comma-separated list of all active ambient audio IDs.<br>=
<eg>E.g.<br>&gt;`0,0,Ambient Layers =3D @ambient@</eg></td>
  </tr>
  <tr>
    <td>ambient.Add(str)<br><eg>No return value</eg></td>
    <td>Adds a layer of ambient audio, with the given sound ID. Up to 4 lay=
ers. If a 5th layer is added, the oldest layer is removed.<br><eg>E.g.<br>?=
loc.begin<br>  ambient.Add(ambient_crypt)</eg></td>
  </tr>
  <tr>
    <td>ambient.Stop()<br><eg>No return value</eg></td>
    <td>Clears all ambient layers.<br><eg>E.g.<br>?time =3D 3<br>  ambient.=
Stop()<br>  ambient.Add(ambient_mines)</eg></td>
  </tr>
  <tr><td><br>BigNumber<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=
=80=BE=E2=80=BE=E2=80=BE=E2=80=BE</td><td><br>BigNumbers are a special type=
 of object that provide a way to work with large integers that exceed 32 bi=
ts. While they can only hold positive and negative whole number values, the=
ir arithmetic and comparison operations work with floats as well as integer=
s and other BigNumbers.</td></tr>
  <tr>
    <td>b.Add(num)<br>b.Add(BigNumber)<br><eg>Returns itself</eg></td>
    <td>Adds a number to a BigNumber (+)<br><eg>E.g.<br>var bn =3D math.Big=
Number(12)<br>bn.Add(5)<br>&gt;@bn@<br>// 17</eg></td>
  </tr>
  <tr>
    <td>b.Sub(num)<br>b.Sub(BigNumber)<br><eg>Returns itself</eg></td>
    <td>Subtracts a number from a BigNumber (-)<br><eg>E.g.<br>var bn =3D m=
ath.BigNumber(12)<br>bn.Sub(5)<br>&gt;@bn@<br>// 7</eg></td>
  </tr>
  <tr>
    <td>b.Mul(num)<br>b.Mul(BigNumber)<br><eg>Returns itself</eg></td>
    <td>Multiplies a BigNumber by a number (*)<br><eg>E.g.<br>var myBigNum1=
 =3D math.BigNumber(12)<br>var myBigNum2 =3D math.BigNumber(12)<br>myBigNum=
1.Mul(5)<br>myBigNum2.Mul(1.5)<br>&gt;@myBigNum1@ @myBigNum2@<br>// 60 18</=
eg></td>
  </tr>
  <tr>
    <td>b.Div(num)<br>b.Div(BigNumber)<br><eg>Returns itself</eg></td>
    <td>Divides a BigNumber by a number (/)<br><eg>E.g.<br>var myBigNum1 =
=3D math.BigNumber(12)<br>var myBigNum2 =3D math.BigNumber(12)<br>myBigNum1=
.Div(5)<br>myBigNum2.Div(1.5)<br>&gt;@myBigNum1@ @myBigNum2@<br>// 2 8</eg>=
</td>
  </tr>
  <tr>
    <td>b.Eq(num)<br>b.Eq(BigNumber)<br><eg>Returns bool</eg></td>
    <td>Determines if a BigNumber is equal to a number (=3D)<br><eg>E.g.<br=
>var bn =3D math.BigNumber(5)<br>&gt;@bn.Eq(5)@ @bn.Eq(3)@<br>// true false=
</eg></td>
  </tr>
  <tr>
    <td>b.Gt(num)<br>b.Gt(BigNumber)<br><eg>Returns bool</eg></td>
    <td>Determines if a BigNumber is greater than a number (&gt;)<br><eg>E.=
g.<br>var bn =3D math.BigNumber(5)<br>&gt;@bn.Gt(3)@ @bn.Gt(10)@<br>// true=
 false</eg></td>
  </tr>
  <tr>
    <td>b.Ge(num)<br>b.Ge(BigNumber)<br><eg>Returns bool</eg></td>
    <td>Determines if a BigNumber is greater than or equal to a number (&gt=
;=3D)<br><eg>E.g.<br>var bn =3D math.BigNumber(5)<br>&gt;@bn.Ge(3)@ @bn.Ge(=
5)@<br>// true true</eg></td>
  </tr>
  <tr>
    <td>b.Lt(num)<br>b.Lt(BigNumber)<br><eg>Returns bool</eg></td>
    <td>Determines if a BigNumber is less than a number (&lt;)<br><eg>E.g.<=
br>var bn =3D math.BigNumber(5)<br>&gt;@bn.Lt(3)@ @bn.Lt(10)@<br>// false t=
rue</eg></td>
  </tr>
  <tr>
    <td>b.Le(num)<br>b.Le(BigNumber)<br><eg>Returns bool</eg></td>
    <td>Determines if a BigNumber is less than or equal to a number (&lt;=
=3D)<br><eg>E.g.<br>var bn =3D math.BigNumber(5)<br>&gt;@bn.Le(10)@ @bn.Le(=
5)@<br>// true true</eg></td>
  </tr>
  <tr>
    <td>b.ToFloat()<br><eg>Returns float</eg></td>
    <td>Converts a big number to float value. Throws error if the number is=
 too large or too small.<br><eg>E.g.<br>var bn =3D math.BigNumber(5)<br>var=
 fNumber =3D bn.ToFloat()<br>&gt;float =3D @fNumber@</eg></td>
  </tr>
  <tr>
    <td>b.ToInt()<br><eg>Returns int</eg></td>
    <td>Converts a big number to integer value. Throws error if the number =
is too large or too small.<br><eg>E.g.<br>var bn =3D math.BigNumber(5)<br>v=
ar iNumber =3D bn.ToInt()<br>&gt;integer =3D @iNumber@</eg></td>
  </tr>
  <tr>
    <td>b.ToString()<br><eg>Returns string</eg></td>
    <td>Returns a string representation of the BigNumber. Can be used to se=
rialize it for storage.<br><eg>E.g.<br>var myBigNum =3D math.BigNumber("123=
456789123456789")<br>storage.Set("myBN", myBigNum.ToString())<br>---<br>var=
 bnStr =3D storage.Get("myBN")<br>var myBigNum =3D math.BigNumber(bnStr)</e=
g></td>
  </tr>
  <tr>
    <td>b.ToUI()<br><eg>Returns string</eg></td>
    <td>Returns a shortened string representation of the number for use in =
user interfaces.<br><eg>E.g.<br>var myBigNum =3D math.BigNumber("1234567891=
23456789")<br>&gt;@myBigNum.ToUI()@<br>// 123.5Qa</eg></td>
  </tr>
  <tr><td><br>color<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE</td><t=
d><br>Colors in Stonescript are represented with a string in <a href=3D"htt=
ps://htmlcolorcodes.com/" target=3D"_blank">hexadecimal notation</a>, such =
as <eg>#ff0000</eg> or with simplified presets such as <eg>#red</eg>.</td><=
/tr>
  <tr>
    <td>color.FromRGB(r,g,b)<br><eg>Returns string</eg></td>
    <td>Converts a color from three integer numbers (0 to 255) into a strin=
g.<br><eg>E.g.<br>var c =3D color.FromRGB(255, 0, 128)<br>&gt;`0,0,@c@, @c@=
</eg></td>
  </tr>
  <tr>
    <td>color.ToRGB(string)<br><eg>Returns int[3]</eg></td>
    <td>Converts a color from string to three integer numbers (0 to 255).<b=
r><eg>E.g.<br>var c =3D color.Random()<br>var rgb =3D color.ToRGB(c)<br>var=
 r =3D rgb=EF=BC=BB0=EF=BC=BD<br>var g =3D rgb=EF=BC=BB1=EF=BC=BD<br>var b =
=3D rgb=EF=BC=BB2=EF=BC=BD<br>&gt;`0,0,@c@, @c@ \n @r@ \n @g@ \n @b@</eg></=
td>
  </tr>
  <tr>
    <td>color.Lerp(c1,c2,t)<br><eg>Returns string</eg></td>
    <td>Interpolates linearly from color <eg>c1</eg> to color <eg>c2</eg> a=
t time (percentage) <eg>t</eg>.<br><eg>E.g.<br>var c1 =3D "#ff4400"<br>var =
c2 =3D "#8888ff"<br>var t =3D 0.5<br>var c<br>t =3D math.sin(time*0.1) / 2 =
+ 0.5<br>c =3D color.Lerp(c1, c2, t)<br>&gt;`0,1,@c@,@c@\n =E2=96=88=E2=96=
=88=E2=96=88=E2=96=88=E2=96=88=E2=96=88</eg></td>
  </tr>
  <tr>
    <td>color.Random()<br><eg>Returns string</eg></td>
    <td>Returns a random color.<br><eg>E.g.<br>var c<br>c =3D color.Random(=
)<br>&gt;`0,0,@c@,@c@\n =E2=96=88=E2=96=88=E2=96=88=E2=96=88=E2=96=88=E2=96=
=88</eg></td>
  </tr>
  <tr><td>draw<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE</td></tr>
  <tr>
    <td>draw.Bg(x, y, color)<br><eg>No return value</eg></td>
    <td>Sets the background color at a specific screen position.<br><eg>E.g=
.<br>draw.Bg(5, 4, #red)</eg></td>
  </tr>
  <tr>
    <td>draw.Bg(x, y, color, w, h)<br><eg>No return value</eg></td>
    <td>Sets the background color of a rectangular region on screen.<br><eg=
>E.g.<br>draw.Bg(5, 4, #cyan, 10, 6)</eg></td>
  </tr>
  <tr>
    <td>draw.Box(x, y, w, h, color, style)<br><eg>No return value</eg></td>
    <td>Draws a rectangular shape at the specified position and size. The r=
ectangle's border is defined by color and a style number. Negative style nu=
mbers cause the center of the rectangle to be transparent. CAVEAT - At this=
 time, advanced prints always draw on top of boxes.<br><eg>Use this example=
 to explore the different styles by pressing Left/Right<br>var style =3D 1<=
br>?key =3D leftBegin<br>  style--<br>?key =3D rightBegin<br>  style++<br>d=
raw.Box(10, 5, 30, 15, #333333, style)<br>&gt;`12,6,#ffffff,Style =3D @styl=
e@<br>&gt;`12,8,#888888,Press Left/Right\nto change style</eg></td>
  </tr>
  <tr>
    <td>draw.Clear()<br><eg>No return value</eg></td>
    <td>Clears the entire screen.</td>
  </tr>
  <tr>
    <td>draw.GetSymbol(x, y)<br><eg>Returns string</eg></td>
    <td>Returns the glyph at screen position (x, y).<br><eg>This example se=
lects a screen coordinate and draws the symbol found there in the top left.=
 The selection [ ] can be moved by the player:<br>var s<br>var x =3D 20<br>=
var y =3D 10<br>var drawX<br>?key=3DleftBegin<br>  x--<br>?key=3DrightBegin=
<br>  x++<br>?key=3DupBegin<br>  y--<br>?key=3DdownBegin<br>  y++<br>s =3D =
draw.GetSymbol(x, y)<br>&gt;`0,1,Symbol =3D @s@<br>drawX =3D x - 1<br>&gt;`=
@drawX@,@y@,[#=EF=BC=BD<br></eg></td>
  </tr>
  <tr>
    <td>draw.Player()<br>draw.Player(x,y)<br><eg>No return value</eg></td>
    <td>Draws the player character, with all equipment and addons, at a spe=
cific point in the script. Optional offset values x, y. For drawing to an a=
bsolute screen position, see the <eg>screen</eg> namespace and derive offse=
ts that convert from the player's local position to screen position.</td>
  </tr>
  <tr><td><br>int<br>=E2=80=BE=E2=80=BE=E2=80=BE</td></tr>
  <tr>
    <td>int.Parse(str)<br><eg>Returns integer</eg></td>
    <td>Converts a string of a number into an integer value. If the given s=
tring is not a number an error is thrown.<br><eg>E.g.<br>var s =3D "999"<br=
>var i =3D int.Parse(s)<br>i++</eg></td>
  </tr>
  <tr><td>event<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE</td></tr>
  <tr>
    <td>event.GetObjectiveId(int)<br><eg>Returns string</eg><br><br>event.G=
etObjectiveProgress<br>(int)<br>event.GetObjectiveGoal(int)<br><eg>Returns =
int</eg></td>
    <td>Returns information about active objectives in a community or seaso=
nal event. Pass the index of the desired objective. Events are usually limi=
ted to a maximum of 3 active objectives, therefore the first parameter woul=
d be 0, 1 or 2.<br><eg>E.g.<br>var id<br>var p<br>var g<br>id =3D event.Get=
ObjectiveId(0)<br>p =3D event.GetObjectiveProgress(0)<br>g =3D event.GetObj=
ectiveGoal(0)<br>&gt;`0,1,@id@:@p@/@g@</eg></td>
  </tr>
  <tr><td>item<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE</td></tr>
  <tr>
    <td>item.CanActivate()<br><eg>Returns boolean</eg></td>
    <td>Returns true if it's possible to activate item abilities. False oth=
erwise. In some gameplay situations all ability activations are disabled, e=
ven if they are not on cooldown, such as moments before a boss fight or dur=
ing a cinematic.<br><eg>E.g.<br>?item.CanActivate()<br>  equip Bardiche<br>=
  activate R</eg></td>
  </tr>
  <tr>
    <td>item.CanActivate(str)<br><eg>Returns boolean</eg></td>
    <td>Returns true if it's possible to activate a specific item. Will onl=
y ever be true if the item is equipped. Some items can have mechanics that =
don't allow them to be activated unless specific criteria are met. This is =
a sub-set of item.GetCooldown(), as an item's cooldown may be zero and it c=
annot be activated, but it will never be possible to activate an item that =
is on cooldown.<br><eg>E.g.<br>equip bardiche<br>?item.GetCooldown("skeleto=
n_arm") &lt;=3D 0<br>  equip skeleton arm<br>  ?item.CanActivate("skeleton_=
arm")<br>    activate R</eg></td>
  </tr>
  <tr>
    <td>item.GetCooldown(str)<br><eg>Returns integer</eg></td>
    <td>Returns the remaining cooldown time (in frames) for a given ability=
.<br>See <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#abili=
ty_ids">Appendix A</a> for all available ability strings. NOTE: Invalid abi=
lity strings will return -1. Some abilities from weapons that have not been=
 used yet will return -1.<br><eg>E.g.<br>?foe =3D boss &amp; item.GetCooldo=
wn("bardiche") &lt;=3D 0<br>  equip bardiche<br>  activate R</eg>
  </td></tr>
  <tr>
    <td>item.GetCount(str)<br><eg>Returns integer</eg></td>
    <td>Returns the number of copies of an item in the inventory. Returns 0=
 if no item is found.<br><eg>E.g.<br>var searchCriteria =3D "sword *0 -big =
-socket"<br>var swordCount =3D item.GetCount(searchCriteria)<br>&gt;I have =
@swordCount@ basic swords
  </eg></td></tr>
  <tr>
    <td>item.GetLoadoutL(int)<br>item.GetLoadoutR(int)<br><eg>Returns strin=
g</eg></td>
    <td>Returns the items in a specific loadout. The integer parameter is t=
he loadout number to query. Returns a blank string if that loadout has no i=
tem in that slot.<br><eg>E.g.<br>&gt;`0,1,Left: @item.GetLoadoutL(1)@<br>&g=
t;`0,2,Right: @item.GetLoadoutR(1)@
  </eg></td></tr>
  <tr>
    <td>item.GetTreasureCount()<br><eg>Returns integer</eg></td>
    <td>Returns the current number of treasure chests in your inventory.
  </td></tr>
  <tr>
    <td>item.GetTreasureLimit()<br><eg>Returns integer</eg></td>
    <td>Returns the total space for treasure chests in your inventory. In o=
ther words, the maximum capacity.<br><eg>E.g.<br>var trs<br>var max<br>trs =
=3D item.GetTreasureCount()<br>max =3D item.GetTreasureLimit()<br>&gt;`0,2,=
Treasures: @trs@/@max@
  </eg></td></tr>
  <tr><td>key<br>=E2=80=BE=E2=80=BE=E2=80=BE</td><td><br>The key namespace =
allows for the customization of standard game inputs and shortcuts. This sy=
stem is based on <eg>actions (abbreviated "act")</eg> and <eg>keys</eg>, wh=
ere each action corresponds to a type of input/shortcut and each key corres=
ponds to a physical key press. The list of all possible keys that can be as=
signed to actions can be found <a href=3D"https://docs.unity3d.com/ScriptRe=
ference/KeyCode.html" target=3D"_Blank">here</a>. Changes to action binding=
s persist between runs (they currently do not save to storage). For optimiz=
ation purposes, it is recommended to not change bindings every frame.<br>
<table>
  <tbody><tr>
    <td>Action<br>------</td>
    <td>Default Key<br>-----------</td>
    <td>Default Key 2<br>-------------</td>
    <td><br></td>
  </tr>
  <tr>
    <td>Pause</td>
    <td>P</td>
    <td>Space</td>
  </tr>
  <tr>
    <td>Leave</td>
    <td>L</td>
  </tr>
  <tr>
    <td>Inventory</td>
    <td>I</td>
  </tr>
  <tr>
    <td>Mindstone</td>
    <td>M</td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td>Potion</td>
    <td>Q</td>
  </tr>
  <tr>
    <td>ItemLeft</td>
    <td>E</td>
  </tr>
  <tr>
    <td>ItemRight</td>
    <td>R</td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td>Up</td>
    <td>W</td>
    <td>UpArrow</td>
  </tr>
  <tr>
    <td>Down</td>
    <td>S</td>
    <td>DownArrow</td>
  </tr>
  <tr>
    <td>Left</td>
    <td>A</td>
    <td>LeftArrow</td>
  </tr>
  <tr>
    <td>Right</td>
    <td>D</td>
    <td>RightArrow</td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td>Primary</td>
    <td>Return</td>
    <td>KeypadEnter</td>
  </tr>
  <tr>
    <td>Back</td>
    <td>X</td>
  </tr>
  <tr>
    <td>Ability1</td>
    <td>LeftShift</td>
    <td>RightShift</td>
  </tr>
  <tr>
    <td>Ability2</td>
    <td>LeftControl</td>
    <td>RightControl</td>
  </tr>
  <tr>
    <td>BumpL</td>
    <td>Z</td>
  </tr>
  <tr>
    <td>BumpR</td>
    <td>C</td>
  </tr>
  <tr><td></td></tr>
  <tr>
    <td>Dynamic1</td>
    <td>F</td>
  </tr>
  <tr>
    <td>Dynamic2</td>
    <td>T</td>
  </tr>
  <tr>
    <td>Dynamic3</td>
    <td>G</td>
  </tr>
  <tr>
    <td>Dynamic4</td>
    <td>V</td>
  </tr>
  <tr>
    <td>Dynamic5</td>
    <td>B</td>
  </tr>
</tbody></table></td>
  </tr><tr>
    <td>key.Bind(act, key1)<br>key.Bind(act, key1, key2)<br><eg>No return v=
alue</eg></td>
    <td>Assigns a new set of keys to a specific action. If another action a=
lready has one of those keys, then the key already in use is abandoned for =
the original action. Up to two keys may be assigned to an action.<br><eg>E.=
g.<br>?loc.begin<br>  key.Bind("Potion", "P")<br>  // In this example, the =
"P" key that originally is assigned to Pause, no longer pauses the game and=
 activates the potion instead. Also, the Potion's original "Q" key no longe=
r works. "Q" is bound to no action.</eg></td>
  </tr>
  <tr>
    <td>key.GetKeyAct(key)<br><eg>Returns string</eg></td>
    <td>Returns the action bound to a given key. Returns "None" if the give=
n key is not bound to any actions.</td>
  </tr>
  <tr>
    <td>key.GetActKey(act)<br><eg>Returns string</eg></td>
    <td>Returns the first key bound to a given action. Returns "None" if th=
e given action has no keys bound to it.</td>
  </tr>
  <tr>
    <td>key.GetActKey2(act)<br><eg>Returns string</eg></td>
    <td>Returns the second key bound to a given action. Returns "None" if t=
he given action does not have a secondary key bound to it.</td>
  </tr>
  <tr>
    <td>key.GetActLabel(act)<br><eg>Returns string</eg></td>
    <td>Returns a user-facing label that represents the first key bound to =
a given action. The current implementation returns the first letter of the =
bound key, which can be confusing in cases such as "LeftShift".</td>
  </tr>
  <tr>
    <td>key.ResetBinds()<br><eg>no return value</eg></td>
    <td>Resets all actions to their default key bindings.</td>
  </tr>
  <tr><td><br>loc<br>=E2=80=BE=E2=80=BE=E2=80=BE</td></tr>
  <tr>
    <td>loc.Leave()<br><eg>No return value</eg></td>
    <td>Causes the run to be abandoned as if the player had pressed to leav=
e manually.</td>
  </tr>
  <tr>
    <td>loc.Pause()<br><eg>No return value</eg></td>
    <td>Causes the run to be paused as if the player had pressed the pause =
button manually.</td>
  </tr>
  <tr><td><br>math<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE</td><td><br>The =
math API works with both integers and floating-point (float) numbers. When =
a number is delcared with a decimal period, it's implied to be a float <eg>=
(e.g. var a =3D 0.5)</eg>. If there is no decimal number, then it's treated=
 as an integer <eg>(e.g. var a =3D 2)</eg>.</td></tr>
  <tr>
    <td>math.Abs(num)<br><eg>Returns number</eg></td>
    <td>Returns the absolute value of a given number.<br><eg>E.g.<br>var nu=
mber =3D -2<br>number =3D math.Abs(number)<br>// number now equals 2</eg></=
td>
  </tr>
  <tr>
    <td>math.Acos(num)<br><eg>Returns number</eg></td>
    <td>Returns the arc-cosine of a number, in radians. The input bounds ar=
e -1 to 1. If the input value is out of bounds then "NaN" is returned.<br><=
eg>E.g.<br>var number =3D math.Acos(-1)<br>// number equals =CF=80</eg></td=
>
  </tr>
  <tr>
    <td>math.Asin(num)<br><eg>Returns number</eg></td>
    <td>Returns the arc-sine of a number, in radians. The input bounds are =
-1 to 1. If the input value is out of bounds then "NaN" is returned.<br><eg=
>E.g.<br>var number =3D math.Asin(1)<br>// number equals =CF=80/2</eg></td>
  </tr>
  <tr>
    <td>math.Atan(num)<br><eg>Returns number</eg></td>
    <td>Returns the arc-tangent of a number, in radians.<br><eg>E.g.<br>var=
 number =3D math.Atan(2)<br>// number equals 1.107149</eg></td>
  </tr>
  <tr>
    <td>math.Atan2(y, x)<br><eg>Returns number</eg></td>
    <td>Returns the angle, in radians, between the x-axis and the line from=
 the origin to the point (x,y)<br><eg>E.g.<br>var number =3D math.Atan2(3, =
2)<br>// number equals 0.9827937</eg></td>
  </tr>
  <tr>
    <td>math.BigNumber()<br>math.BigNumber(number)<br>math.BigNumber(str)<b=
r><eg>Returns BigNumber</eg></td>
    <td>Creates a new BigNumber object from a float or int, or parses a str=
ing into a BigNumber object.<br><eg>E.g.<br>var myBigNum =3D math.BigNumber=
("500")<br>myBigNum.Add(500).Mul(1000).Mul(1000).Mul(1000)<br>&gt;@myBigNum=
@<br>// 1000000000000</eg></td>
  </tr>
  <tr>
    <td>math.Ceil(num)<br><eg>Returns number</eg></td>
    <td>Rounds a number up, to the first whole number greater than it.<br><=
eg>E.g.<br>var number =3D math.Ceil(4.2)<br>// number equals 5.0</eg></td>
  </tr>
  <tr>
    <td>math.CeilToInt(num)<br><eg>Returns integer</eg></td>
    <td>Rounds a number up, to the first integer greater than it.<br><eg>E.=
g.<br>var number =3D math.CeilToInt(4.2)<br>// number equals 5</eg></td>
  </tr>
  <tr>
    <td>math.Clamp(num, min, max)<br><eg>Returns number</eg></td>
    <td>Constrains a number to within the range 'min' and 'max'. If the num=
ber is already within the range then it will be returned without change.<br=
><eg>E.g.<br>var number =3D 50<br>number =3D math.Clamp(number, 0, 10)<br>/=
/ number has been clamped down and will equal 10</eg></td>
  </tr>
  <tr>
    <td>math.Cos(num)<br><eg>Returns number</eg></td>
    <td>Returns the cosine of a given radian angle.<br><eg>E.g.<br>var numb=
er =3D math.Cos(0)<br>// number equals 1</eg></td>
  </tr>
  <tr>
    <td>math.e<br><eg>float</eg></td>
    <td>The constant <eg>e</eg>, also known as Euler's number, approximatel=
y 2.71828<br><eg>E.g.<br>&gt;E =3D @math.e@<br>// prints the value of e to =
the screen</eg></td>
  </tr>
  <tr>
    <td>math.Exp(num)<br><eg>Returns number</eg></td>
    <td>Returns <eg>e</eg> raised to a given power.<br><eg>E.g.<br>var numb=
er =3D math.Exp(3)<br>// number equals 20.08554</eg></td>
  </tr>
  <tr>
    <td>math.Floor(num)<br><eg>Returns number</eg></td>
    <td>Rounds a number down, to the first whole number smaller than it.<br=
><eg>E.g.<br>var number =3D math.Floor(2.7)<br>// number equals 2.0</eg></t=
d>
  </tr>
  <tr>
    <td>math.FloorToInt(num)<br><eg>Returns integer</eg></td>
    <td>Rounds a number down, to the first integer smaller than it.<br><eg>=
E.g.<br>var number =3D math.FloorToInt(2.7)<br>// number equals 2</eg></td>
  </tr>
  <tr>
    <td>math.Lerp(a, b, t)<br><eg>Returns number</eg></td>
    <td>Performs a linear interpolation, from value <eg>a</eg> to <eg>b</eg=
> at time (percentage) <eg>t</eg>.<br><eg>E.g.<br>var number =3D math.Lerp(=
0.0, 20.0, 0.75)<br>// number equals 15.0<br><br>E.g.2:<br>var n =3D 0.0<br=
>?key =3D Begin<br>  n =3D 0.0<br>n =3D math.Lerp(n, 100, 0.02)<br>&gt;n =
=3D @n@<br>// Variable n eases towards 100, at 2% per frame. When a key is =
pressed it resets</eg></td>
  </tr>
  <tr>
    <td>math.Log(num, base)<br><eg>Returns number</eg></td>
    <td>Returns the logarithm of a number at a given base.<br><eg>E.g.<br>v=
ar number =3D math.Log(5, 2)<br>// number equals 2.321928</eg></td>
  </tr>
  <tr>
    <td>math.Max(num1, num2)<br><eg>Returns number</eg></td>
    <td>Returns the largest of the two numbers.<br><eg>E.g.<br>var number =
=3D math.Max(3, 10)<br>// number equals 10</eg></td>
  </tr>
  <tr>
    <td>math.Min(num1, num2)<br><eg>Returns number</eg></td>
    <td>Returns the smallest of the two numbers.<br><eg>E.g.<br>var number =
=3D math.Min(3, 10)<br>// number equals 3</eg></td>
  </tr>
  <tr>
    <td>math.pi<br><eg>float</eg></td>
    <td>The constant =CF=80, approximately 3.1415926<br><eg>E.g.<br>&gt;PI =
=3D @math.pi@<br>// prints the value of =CF=80 to the screen</eg></td>
  </tr>
  <tr>
    <td>math.Pow(num, p)<br><eg>Returns number</eg></td>
    <td>Returns the number raised to a power.<br><eg>E.g.<br>var number =3D=
 math.Pow(3, 2)<br>// number equals 9</eg></td>
  </tr>
  <tr>
    <td>math.Round(num)<br><eg>Returns number</eg></td>
    <td>Rounds a number to the nearest whole number.<br><eg>E.g.<br>var num=
ber =3D math.Round(2.7)<br>// number equals 3.0</eg></td>
  </tr>
  <tr>
    <td>math.RoundToInt(num)<br><eg>Returns integer</eg></td>
    <td>Rounds a number to the nearest whole integer.<br><eg>E.g.<br>var nu=
mber =3D math.RoundToInt(2.7)<br>// number equals 3</eg></td>
  </tr>
  <tr>
    <td>math.Sign(num)<br><eg>Returns number</eg></td>
    <td>Returns -1 if the given number is negative. Otherwise, returns 1.<b=
r><eg>E.g.<br>var sign =3D math.Sign(-21)<br>var n =3D 10 * sign<br>// n eq=
uals -10</eg></td>
  </tr>
  <tr>
    <td>math.Sin(num)<br><eg>Returns number</eg></td>
    <td>Returns the sine of a given radian angle.<br><eg>E.g.<br>var number=
 =3D math.Sin(math.pi / 2)<br>// number equals 1</eg></td>
  </tr>
  <tr>
    <td>math.Sqrt(num)<br><eg>Returns number</eg></td>
    <td>Returns the square root of a number.<br><eg>E.g.<br>var number =3D =
math.Sqrt(9)<br>// number equals 3</eg></td>
  </tr>
  <tr>
    <td>math.Tan(num)<br><eg>Returns number</eg></td>
    <td>Returns the tangent of a given radian angle.<br><eg>E.g.<br>var num=
ber =3D math.Tan(2)<br>// number equals -2.18504</eg></td>
  </tr>
  <tr>
    <td>math.ToDeg(num)<br><eg>Returns number</eg></td>
    <td>Converts a radian number to degrees.<br><eg>E.g.<br>var number =3D =
math.ToDeg(2 * math.pi)<br>// number equals 360</eg></td>
  </tr>
  <tr>
    <td>math.ToRad(num)<br><eg>Returns number</eg></td>
    <td>Converts a degrees number to radians.<br><eg>E.g.<br>var number =3D=
 math.ToRad(360)<br>// number equals 2=CF=80</eg></td>
  </tr>
  <tr><td></td></tr>
  <tr><td>music<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE</td></tr>
  <tr>
    <td>?music<br><eg>Return string</eg></td>
    <td>Returns the ID of the currently playing music.<br><eg>E.g.<br>&gt;`=
0,0,Current Music =3D @music@</eg></td>
  </tr>
  <tr>
    <td>music.Play(str)<br><eg>No return value</eg></td>
    <td>Plays a music, with the given sound ID. There can only be one music=
 playing at a time.<br><eg>E.g.<br>?loc.begin | loc.loop<br>  music.Play(te=
mple_0)</eg></td>
  </tr>
  <tr>
    <td>music.Stop()<br><eg>No return value</eg></td>
    <td>Stops all music.<br><eg>E.g.<br>?!string.Equals(music, "")<br>  mus=
ic.Stop()</eg></td>
  </tr>
  <tr><td></td></tr>
  <tr><td>player<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE<=
/td></tr>
  <tr>
    <td>player.ShowScaredFace(num)<br><eg>No return value</eg></td>
    <td>If the player has big-head enabled, their facial expression will ch=
ange to scared for a given amount of time.<eg><br>E.g.<br>?key =3D primaryB=
egin<br>  player.ShowScaredFace(1)</eg></td>
  </tr>
  <tr><td></td></tr>
  <tr><td>screen<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE<=
/td></tr>
  <tr>
    <td>screen.FromWorldX(int)<br><eg>Returns integer</eg></td>
    <td>Converts a value on the X-axis from world-space to screen-space.</t=
d>
  </tr>
  <tr>
    <td>screen.FromWorldZ(int)<br><eg>Returns integer</eg></td>
    <td>Converts a value from the world-space Z-axis to screen-space Y-axis=
.<eg><br>E.g.<br>var x<br>var y<br>x =3D screen.FromWorldX(pos.x)<br>y =3D =
screen.FromWorldZ(pos.z - pos.y)<br>&gt;`0,1,Player position on screen: @x@=
,@y@</eg></td>
  </tr>
  <tr>
    <td>screen.ToWorldX(int)<br><eg>Returns integer</eg></td>
    <td>Converts a value on the X-axis from screen-space to world-space.</t=
d>
  </tr>
  <tr>
    <td>screen.ToWorldZ(int)<br><eg>Returns integer</eg></td>
    <td>Converts a value from the screen-space Y-axis to world-space Z-axis=
.<eg><br>E.g.<br>var x<br>var y<br>var z<br>x =3D input.x<br>y =3D input.y<=
br>&gt;`0,1,Screen position of cursor: @x@,@y@<br><br>x =3D screen.ToWorldX=
(input.x)<br>z =3D screen.ToWorldZ(input.y)<br>&gt;`0,2,World position of c=
ursor: @x@,@z@</eg></td>
  </tr>
  <tr>
    <td>screen.Next()<br><eg>No return value</eg></td>
    <td>For locations that are multi-screen, moves the camera one screen fo=
rward in relation to the player.<eg><br>E.g.<br>?key =3D rightBegin<br>  sc=
reen.Next()</eg></td>
  </tr>
  <tr>
    <td>screen.Previous()<br><eg>No return value</eg></td>
    <td>For locations that are multi-screen, moves the camera one screen ba=
ck in relation to the player.<eg><br>E.g.<br>?key =3D leftBegin<br>  screen=
.Previous()</eg></td>
  </tr>
  <tr>
    <td>screen.ResetOffset()<br><eg>No return value</eg></td>
    <td>Resets the camera to follow the player, undoing changes made by scr=
een.Next() and screen.Previous()<eg><br>E.g.<br>var lastScreenI =3D -1<br>?=
lastScreenI ! screen.i<br>  screen.ResetOffset()<br>lastScreenI =3D screen.=
i</eg></td>
  </tr>
  <tr><td>storage<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=
=E2=80=BE</td><td>Values saved into permanent storage persist when you leav=
e a location, as well as when the game is shut down. They are not part of y=
our primary_save, existing instead in a series of separate files within the=
 Stonescript folder. Imported scripts access storage in isolation from each=
 other, allowing different modules to use the same keys without modifying e=
ach other's data.</td></tr>
  <tr>
    <td>storage.Delete(string)<br><eg>No return value</eg></td>
    <td>Deletes any value that may exist at the specified key.<br><eg>E.g.<=
br>storage.Delete("highscore")</eg></td>
  </tr>
  <tr>
    <td>storage.Get(string)<br><eg>Returns value</eg></td>
    <td>Retrieves a permanent value stored at the specified key.<br><eg>E.g=
.<br>var value =3D storage.Get("highscore")<br>?value<br>  &gt;High Score =
=3D @value@<br>:<br>  &gt;No High Score found.</eg></td>
  </tr>
  <tr>
    <td>storage.Get(string, value)<br><eg>Returns value</eg></td>
    <td>Retrieves a permanent value stored at the specified key. If it's no=
t found, returns the second parameter as a default value.<br><eg>E.g.<br>va=
r value =3D storage.Get("highscore", 0)<br>&gt;High Score =3D @value@</eg><=
/td>
  </tr>
  <tr>
    <td>storage.Has(string)<br><eg>Returns boolean</eg></td>
    <td>Returns <eg>true</eg> if the specified key exists in permanent stor=
age; <eg>false</eg> otherwise.<br><eg>E.g.<br>?storage.Has("highscore")<br>=
  var value =3D storage.Get("highscore")<br>  &gt;High Score =3D @value@<br=
>:<br>  &gt;No High Score found.</eg></td>
  </tr>
  <tr>
    <td>storage.Incr(string)<br><eg>Returns integer</eg></td>
    <td>Increases by 1 the value stored at the specified key, then returns =
the new value.<br><eg>E.g.<br>?gameOver<br>  storage.Incr("stat_TimesPlayed=
")</eg></td>
  </tr>
  <tr>
    <td>storage.Keys()<br><eg>Returns array</eg></td>
    <td>Retrieves an array of strings containing all the storage keys avail=
able in the current context.<br><eg>E.g.<br>var a<br>?time % 30 =3D 0<br>  =
a =3D storage.Keys()<br>  for i =3D 0 .. a.Count()-1<br>    &gt;Key @i@ =3D=
 @a[i]@</eg></td>
  </tr>
  <tr>
    <td>storage.Incr(string, integer)<br><eg>Returns integer</eg></td>
    <td>Increases the value stored at the specified key by a given amount, =
then returns the new value.<br><eg>E.g.<br>var amount<br>?foundCoins<br>  a=
mount =3D rng%5 + 5<br>  storage.Incr("coins", amount)</eg></td>
  </tr>
  <tr>
    <td>storage.Set(string, value)<br><eg>No return value</eg></td>
    <td>Saves a value to permanent storage at a specified key.<br><eg>E.g.<=
br>var score =3D 1000<br>storage.Set("highscore", score)</eg></td>
  </tr>
  <tr><td>string<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE<=
/td></tr>
  <tr>
    <td>string.Break(string, integer)<br><eg>Returns array</eg></td>
    <td>Breaks a string into multiple strings, given a max width.<eg><br>E.=
g.<br>var s =3D "The brown fox jumps over the lazy dog"<br>var a =3D string=
.Break(s, 14)<br>for i =3D 0 .. a.Count()-1<br>  &gt;`0,@i@,@a[i]@</eg></td=
>
  </tr>
  <tr>
    <td>string.Capitalize(str)<br><eg>Returns string</eg></td>
    <td>Changes the first letter of a string to be upper-case.<eg><br>E.g.<=
br>var a =3D "foo"<br>a =3D string.Capitalize(a)<br>&gt;@a@<br>(Prints "Foo=
")</eg></td>
  </tr>
  <tr>
    <td>string.Equals(str1, str2)<br><eg>Returns boolean</eg></td>
    <td>Takes two string parameters and returns true if they are exactly th=
e same. Returns false otherwise. Case sensitive.<eg><br>E.g.<br>var a =3D "=
foo"<br>?string.Equals(a, "foo")<br>  &gt;The strings are equal<br>:<br>  &=
gt;They are NOT equal<br>// The strings are equal in this case. string.Equa=
ls() evaluates to true</eg></td>
  </tr>
  <tr>
    <td>string.Format(str1, ...)<br><eg>Returns string</eg></td>
    <td>Modifies a string by replacing format-templates with the values of =
the other parameters, then returns the final composed string. This is a pow=
erful function that supports lots of <a href=3D"https://docs.microsoft.com/=
en-us/dotnet/api/system.string.format?view=3Dnet-5.0" target=3D"_Blank">for=
matting options</a>.<eg><br>E.g.<br>var str =3D "My name is {0} and I have =
{1} power!"<br>var result =3D string.Format(<br>^  str,<br>^  player.name,<=
br>^  totalgp<br>^)<br>&gt;@result@</eg></td>
  </tr>
  <tr>
    <td>string.IndexOf(str, criteria)<br><eg>Returns integer</eg></td>
    <td>Takes a string variable and a string criteria as parameters and fin=
ds the position of the criteria inside the string. Returns -1 if not found.=
<eg><br>E.g.<br>var a =3D Hello World!<br>var index =3D string.IndexOf(a, l=
lo)<br>// index equals 2</eg></td>
  </tr>
  <tr>
    <td>string.IndexOf(str, criteria, startAt)<br><eg>Returns integer</eg><=
/td>
    <td>Takes a string variable, a string criteria and a starting index as =
parameters. Finds the position of the criteria inside the string, but begin=
s the search at 'startAt'. Returns -1 if not found.<eg><br>E.g.<br>var a =
=3D Hello World!<br>var index =3D string.IndexOf(a, llo, 4)<br>// index equ=
als -1 because the search began at position 4<br>// therefore 'llo' was not=
 found</eg></td>
  </tr>
  <tr>
    <td>string.Join(s, [])<br>string.Join(s, [], int)<br>string.Join(s, [],=
 int,int)<br><eg>Returns string</eg></td>
    <td>Takes an array of strings <eg>[]</eg> and combines it into a single=
 string with the separator <eg>s</eg>. Optional integer parameters can be p=
assed that specify the <eg>starting index</eg> and <eg>number of elements</=
eg> to combine. If no index parameters are provided, the entire array is co=
mbined.<eg><br>E.g.<br>var a =3D =EF=BC=BB"Hello", "World", "!"=EF=BC=BD<br=
>var b =3D string.Join(";", a)<br>&gt;`0,0,@b@<br>// Prints "Hello;World;!"=
<br><br>E.g.2<br>var a =3D =EF=BC=BB"Hello", "World", "!"=EF=BC=BD<br>var b=
 =3D string.Join(";", a, 1)<br>&gt;`0,0,@b@<br>// Prints "World;!"<br><br>E=
.g.3<br>var a =3D =EF=BC=BB"Hello", "World", "!"=EF=BC=BD<br>var b =3D stri=
ng.Join(";", a, 0, 2)<br>&gt;`0,0,@b@<br>// Prints "Hello;World"</eg></td>
  </tr>
  <tr>
    <td>string.Size(str)<br><eg>Returns integer</eg></td>
    <td>Takes a string variable as parameter and calculates how long it is,=
 in number of glyphs.<eg><br>E.g.<br>var a =3D Hello World!<br>var size =3D=
 string.Size(a)<br>&gt;size =3D @size@</eg></td>
  </tr>
  <tr>
    <td>string.Split(str)<br>string.Split(str, s=E2=80=A6)<br>string.Split(=
str, s=E2=80=A6, bool)<br>string.Split(str, bool)<br><eg>Returns array</eg>=
</td>
    <td>Takes a string and breaks it down into an array of strings, given a=
 set of string separators <eg>s=E2=80=A6</eg>. If no separators are provide=
d, then the string is broken wherever there is a space. An optional boolean=
 parameter specifies if empty entries should be discarded.<eg><br>E.g.<br>v=
ar a =3D string.Split("Hello World !")<br>for i =3D 0 .. a.Count()-1<br>  &=
gt;`0,@i@,=EF=BC=BB@i@=EF=BC=BD =3D @a=EF=BC=BBi=EF=BC=BD@<br>// Breaks up =
the string into: "Hello", "World", "!"<br><br>E.g.2<br>var a =3D string.Spl=
it("Hello World !", " ", "l")<br>for i =3D 0 .. a.Count()-1<br>  &gt;`0,@i@=
,=EF=BC=BB@i@=EF=BC=BD =3D @a=EF=BC=BBi=EF=BC=BD@<br>// Breaks up the strin=
g into: "He", " ", "o", "Wor", "d", "!"<br><br>E.g.3<br>var a<br>a =3D stri=
ng.Split("Hello World !","l","r",true)<br>for i =3D 0 .. a.Count()-1<br>  &=
gt;`0,@i@,=EF=BC=BB@i@=EF=BC=BD =3D @a=EF=BC=BBi=EF=BC=BD@<br>// Breaks up =
the string into: "He", "o Wo", "d !"</eg></td>
  </tr>
  <tr>
    <td>string.Sub(str, startAt)<br><eg>Returns string</eg></td>
    <td>Takes a string variable and a starting index as parameters and spli=
ts the string from that point forward.<eg><br>E.g.<br>var a =3D Hello World=
!<br>var subString =3D string.Sub(a, 6)<br>&gt;substring =3D @subString@<br=
>// subString equals "World!"</eg></td>
  </tr>
  <tr>
    <td>string.Sub(str, startAt, length)<br><eg>Returns string</eg></td>
    <td>Takes a string variable, a starting index and a length as parameter=
s and splits the string from that starting point, stopping at the given len=
gth.<eg><br>E.g.<br>var a =3D Hello World!<br>var subString =3D string.Sub(=
a, 6, 3)<br>&gt;substring =3D @subString@<br>// subString equals "Wor"</eg>=
</td>
  </tr>
  <tr>
    <td>string.ToLower(str)<br><eg>Returns string</eg></td>
    <td>Changes all letters in a string to lower-case.<eg><br>E.g.<br>var a=
 =3D "Foo"<br>a =3D string.ToLower(a)<br>&gt;@a@<br>// Prints "foo" to the =
screen</eg></td>
  </tr>
  <tr>
    <td>string.ToUpper(str)<br><eg>Returns string</eg></td>
    <td>Changes all letters in a string to upper-case.<eg><br>E.g.<br>var a=
 =3D "Foo"<br>a =3D string.ToUpper(a)<br>&gt;@a@<br>// Prints "FOO" to the =
screen</eg></td>
  </tr>
  <tr><td>sys<br>=E2=80=BE=E2=80=BE=E2=80=BE</td><td>(The sys namespace is =
not functioning as intended at the moment)</td></tr>
  <tr>
    <td>sys.cacheRemoteFiles<br><eg>boolean</eg></td>
    <td>Indicates if files imported remotely should be cached between runs.=
 Default is <eg>true</eg>. If set to false, then remote scripts will re-dow=
nload when you begin play from the Locations screen. It can be useful to ch=
ange this during development and iteration of new scripts that are deployed=
 remotely. This global property persists between runs.<eg><br>E.g.<br>// We=
 use the "up" key as an input to toggle<br>// remote caching on/off during =
rapid iteration<br>?key =3D upBegin<br>  sys.cacheRemoteFiles =3D !sys.cach=
eRemoteFiles<br>  ?sys.cacheRemoteFiles<br>    &gt;Remote caching ENABLED<b=
r>  :<br>    &gt;Remote caching DISABLED</eg></td>
  </tr>
  <tr>
    <td>sys.fileUrl<br><eg>string (get only)</eg></td>
    <td>Getter for the current file path to be used when importing scripts.=
 The default value depends on your device. On PC the default value is <eg>l=
ocal</eg>. On mobile the default is <eg>https://StonestoryRPG.com/stonescri=
pt/</eg><eg><br>E.g.<br>&gt;`0,1,fileUrl =3D @sys.fileUrl@</eg></td>
  </tr>
  <tr>
    <td>sys.SetFileUrl(str)<br><eg>No return value</eg></td>
    <td>Changes the origin of imported scripts when using the commands <eg>=
import</eg> or <eg>new</eg>. Can only be called on the Mind Stone and will =
error if written on an imported script. Accepts any URL as a remote locatio=
n, but also accepts the values <eg>"local"</eg> and <eg>"remote"</eg> as sh=
ortcuts to easily point at your local drive or to the official Stone Story =
RPG repository, respectively. If <eg>null</eg> is passed as parameter, then=
 the file URL resets to the default value for your device. This global prop=
erty persists between runs.<eg><br>E.g.<br>sys.SetFileUrl(<br>^"https://MyC=
oolDomain.com/scripts/")<br>import MyCombatScript</eg></td>
  </tr>
  <tr>
    <td>sys.MindConnect()<br><eg>No return value</eg></td>
    <td>(Experimental feature) Works only when <eg>sys.MindConnect()</eg> i=
s the only line of text in your Mind Stone. Enables an interface that waits=
 for a connection from other programs, such as a python script. Once connec=
ted, the external program can run Stonescript commands and evaluate game st=
ate variables.<br>Learn more here:<br><a href=3D"https://github.com/artific=
ial-potato/SSRPGInterface">https://github.com/artificial-potato/SSRPGInterf=
ace</a>
  </td></tr>
  <tr>
    <td>sys.isMobile<br><eg>Returns bool</eg></td>
    <td>Returns <eg>true</eg> if the users is on Android or iOS.
  </td></tr>
  <tr>
    <td>sys.isPC<br><eg>Returns bool</eg></td>
    <td>Returns <eg>true</eg> if the users is on Win/Mac/Linux.
  </td></tr>
  <tr>
    <td>sys.os<br><eg>Returns string</eg></td>
    <td>The user's operating system, such as "Android", "iOS", "Linux", "OS=
X" or "Windows".
  </td></tr>
  <tr><td>Text Localization<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=
=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=
=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE</td><td>Stonescript supports 12 langua=
ges as of this writing. A few operations allow custom scripts to adapt to t=
he player's chosen language.</td></tr>
  <tr>
  </tr><tr>
    <td>te.language<br><eg>string</eg></td>
    <td>The code for the language selected by the player in settings. Possi=
ble values: EN, PT-BR, ZH-CN, ZH-TW, FR, DE, RU, ES-LA, ES-EU, JP, KR and T=
K.<eg><br>E.g.<br>var lang =3D te.language<br>&gt;Language =3D @lang@</eg><=
/td>
  </tr>
  <tr>
    <td>te.xt(str)<br><eg>Returns string</eg></td>
    <td>Translates a given English text into the player's selected language=
. If a translated version is not found, then the input text is returned ins=
tead. Alternatively, a text identifier (TID) can be used as input--albeit t=
he exhausting list of TIDs is beyond the scope of this manual.<eg><br>E.g.<=
br>var button =3D ui.AddButton()<br>button.text =3D te.xt(Play)<br>// Chang=
e your language in settings to see this example at work</eg></td>
  </tr>
  <tr>
    <td>te.GetTID(str)<br><eg>Returns string</eg></td>
    <td>Returns the text identifier (TID) for a given text. The input text =
is expected in the language selected by the player.<eg><br>E.g.<br>var tid =
=3D te.GetTID("Play")<br>&gt;`0,1,@tid@<br>// Prints tid_button_play to the=
 screen</eg></td>
  </tr>
  <tr>
    <td>te.ToEnglish(str)<br><eg>Returns string</eg></td>
    <td>Translates a given text from the player's selected language into th=
e original English text. If a translated version is not found, then the inp=
ut text is returned instead.<eg><br>E.g.<br>&gt;`0,1,@te.ToEnglish("Jogar")=
@<br>// If Portuguese is chosen in settings it will print "Play"<br>// othe=
rwise it will print "Jogar"</eg></td>
  </tr>
  <tr><td>time<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE</td></tr>
  <tr>
    <td>time.FormatCasual(int)<br>time.FormatCasual(int,bool)<br><eg>Return=
s string</eg></td>
    <td>Converts an amount of frames into a human-readable string represent=
ation of time, such as "1m 23s". The second parameter (bool) is optional; I=
f 'true', then precision is maximized in the result.<eg><br>E.g.<br>&gt;`0,=
0,Current time =3D<br>^ @time.FormatCasual(totaltime, true)@</eg></td>
  </tr>
  <tr>
    <td>time.FormatDigital(int)<br>time.FormatDigital(int,bool)<br><eg>Retu=
rns string</eg></td>
    <td>Converts an amount of frames into a human-readable string represent=
ation of time, such as "1:23". The second parameter (bool) is optional; If =
'true', then precision is maximized in the result.<eg><br>E.g.<br>&gt;`0,0,=
Current time =3D<br>^ @time.FormatDigital(totaltime, true)@</eg></td>
  </tr>
  <tr><td>UI<br>=E2=80=BE=E2=80=BE</td><td><br>See the <a href=3D"https://s=
tonestoryrpg.com/stonescript/manual.html#user-interface">User Interface</a>=
 section for details about Stonescript's advanced UI system. Miscellaneous =
functions of the <eg>ui</eg> namespace:</td></tr>
  <tr>
    <td>ui.OpenInv()<br><eg>No return value</eg></td>
    <td>Opens the inventory screen.</td>
  </tr>
  <tr>
    <td>ui.OpenMind()<br><eg>No return value</eg></td>
    <td>Opens the Mind Stone screen.</td>
  </tr>
  <tr>
    <td>ui.ShowBanner(str)<br>ui.ShowBanner(str,str)<br><eg>No return value=
</eg></td>
    <td>Displays the animated banner with up to two messages. The banner an=
imation restarts each time ui.ShowBanner() is called.<eg><br>E.g.<br>?time =
=3D 120<br>  ui.ShowBanner("Hello World!")</eg></td>
  </tr>
  <tr><td>Other<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE</td></tr>
  <tr>
    <td>Type(var)<br><eg>Returns string</eg></td>
    <td>Evaluates the type of a variable and returns a string representatio=
n. Possible types include 'string', 'int', 'bool', 'function', 'object' and=
 'null'.<eg><br>E.g.<br>var a =3D 0<br>?Type(a) =3D int<br>  &gt;Variable '=
a' is an integer.</eg></td>
  </tr>
</tbody></table></font>
<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"import"><div id=3D"separator"><!---------------------------></di=
v>

=C2=B7:=C2=B7:=C2=B7 Importing External Scripts =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
Your script doesn't have to be all in the Mind Stone. Stonescript supports =
the loading of external files through the 'import' and 'new' keywords. For =
external scripts to work they must be located in your <a href=3D"https://st=
onestoryrpg.com/faq.html#Technical%20Help">save-file folder</a>, inside a /=
Stonescript folder and end in '.txt'.

In the most basic example an external script is imported and runs as if it =
were directly in your Mind Stone, making this a convenient way to organize =
farming scripts:
<eg>
import Rocky
import Deadwood
import Caves
import Forest
</eg>
When a script is imported it's copied into its own container and returns as=
 a reference. Variables declared in the external script are isolated and do=
n't interact with variables in other scripts. In this example, a printing u=
tility script offers simplified services:
<eg><f>
// PrintUtil.txt
func LowerLeft(x, y, color, message)
  y =3D y + screen.h
  &gt;`@x@,@y@,@color@,@message@

func LowerRight(x, y, color, message)
  x =3D x + screen.w
  y =3D y + screen.h
  &gt;`@x@,@y@,@color@,@message@

// Main script in Mind Stone
var print =3D import PrintUtil
disable hud
print.LowerLeft(0,-1,#ffffff,"Health: " + hp)
</f></eg>
Advanced solutions can import the same script multiple times using the 'new=
' command, for example, to implement componentization or an Object Oriented=
 paradigm:
<eg><f>
// Vector.txt
var x =3D 0
var y =3D 0

func init(_x, _y)
  x =3D _x
  y =3D _y

func subtract(otherVect)
  x =3D x - otherVect.x
  y =3D y - otherVect.y

// Main script in Mind Stone
var vectFrom =3D new Components/Vector
var vectTo =3D new Components/Vector

vectFrom.init(5, 4)
vectTo.init(8, 2)
vectTo.subtract(vectFrom)

&gt;x =3D @vectTo.x@, y =3D @vectTo.y@
</f></eg>
External scripts can implement a 'ToString()' function, allowing their dire=
ct use in advanced print commands:
<eg><f>
// Vector.txt
var x =3D 0
var y =3D 0

func init(_x, _y)
  x =3D _x
  y =3D _y

func ToString()
  return "(" + x + ", " + y + ")"

// Main script in Mind Stone
var v =3D import Components/Vector
v.init(3,5)
&gt;Vector =3D @v@
</f></eg>
External scripts can be imported from subfolders:
<eg><f>
import Games/Blackjack
import Cosmetics/PetFrog
import Cosmetics/Hats
</f></eg>
While similar, there are two important differences between 'import' and 'ne=
w'. With 'import' the same object is returned each time. If you import the =
same script from multiple places they will all be using the same object. Sc=
ripts imported with 'new' are unique copies, but their script body will onl=
y run 1 time as opposed to every frame.
</font>

<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"ascii-art"><div id=3D"separator"><!---------------------------><=
/div>

=C2=B7:=C2=B7:=C2=B7 ASCII-art =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
In Stonescript, custom ASCII-art can be embedded within the scripts and dra=
wn on screen with the advanced print commands. There are a few methods to d=
o this and some glyphs have special behavior:
<f>
#  - Blank space. Transparency. Does not draw.
\n - Line break. Causes the draw to continue on the next line. WARNING: Thi=
s is an expensive operator and should not be used for breaking lines in lar=
ge drawings. Use the ascii/asciiend block instead.
</f>

Method 1 - Advanced print

This example draws a green circle to the top-left of the screen.
<eg><f>
&gt;`1,0,#green,ascii
#.-.
(   )
#`-=C2=B4
asciiend
</f></eg>

Method 2 - Variables

This example saves the art for a spooky fish into a variable, then draws it=
 to the top-left of the screen in red color.
<eg><f>
var fishSprite
fishSprite =3D ascii
###(=C2=B0_##
#_/_ o\#
#=C2=B4  `'"#
asciiend

&gt;`0,3,#red,@fishSprite@
</f></eg></font>

<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"loops"><div id=3D"separator"><!---------------------------></div=
>

=C2=B7:=C2=B7:=C2=B7 Loops =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb"><f>

Loops allow a section of code to run multiple times. To create a loop use t=
he 'for' keyword in the form:
<eg>
for v =3D a..b
</eg>
The variable 'v' begins the loop with value 'a' and increases in value unti=
l it reaches 'b', then the loop ends:
<eg>
for i =3D 1..5
  &gt;`0,@i@,i =3D @i@
</eg>
The iteration variable 'v' should not be declared prior to the 'for' and is=
 contained to the scope of the loop. However, the begin and end values 'a' =
and 'b' can be declared prior to the loop:
<eg>
var min =3D 1
var max =3D 4
var sum
sum =3D 0
for j =3D min..max
  sum =3D sum + j
&gt;sum =3D @sum@
</eg>
Loops can also go in the opposite direction, as well as use negative number=
s:
<eg>
var g
g =3D ""
for k =3D 5..-2
  g =3D g + k
&gt;g =3D @g@
</eg>
Loops can be nested inside each other, as well as inlined with math express=
ions to form complex algorithms:
<eg>
for x =3D 1..9
  for y =3D x/2 .. x/2 + 6
    &gt;`@x@,@y@,*
</eg>
To break out of the loop early, modify the iteration variable so that it's =
out of range:
<eg>
var n
n =3D ""
for i =3D 1..5
  ?i =3D 3
    i =3D -1
  n =3D n + i
&gt;n =3D @n@
</eg>
Similarly, break out of the loop with the <eg>break</eg> command:
<eg>
for i =3D 1..5
  ?i =3D 3
    break
</eg>
Loops also support the <eg>continue</eg> command. When called, instructions=
 below the <eg>continue</eg> are skipped and the loop continues looping:
<eg>
var n
n =3D ""
for i =3D 1..5
  ?i =3D 3
    continue
  n =3D n + i
&gt;n =3D @n@
</eg>
It's possible to loop through elements of an <a href=3D"https://stonestoryr=
pg.com/stonescript/manual.html#arrays">array</a> using this form:
<eg>
var a =3D [1, 2, 3]
var n
n =3D ""
for value : a
  n =3D n + value
&gt;n =3D @n@
</eg></f></font>

<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"arrays"><div id=3D"separator"><!---------------------------></di=
v>

=C2=B7:=C2=B7:=C2=B7 Arrays =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb"><f>
Arrays are a special type of variable. They provide a way to sequentially o=
rganize values and objects into a collection that is assigned to a single v=
ariable.

<table>
  <tbody><tr>
    <td>Operation<br>---------</td>
    <td>Description<br>-----------</td>
  </tr>
  <tr>
    <td>a =3D []</td>
    <td>Initializes a new array. See below for more information.</td>
  </tr>
  <tr>
    <td>a[integer]</td>
    <td>Reads the value at a given position.<br><eg>E.g.:<br>var myArray =
=3D [10, 3]<br>?myArray[1] =3D 3<br>  &gt;Yes, the value at [1] equals 3</e=
g></td>
  </tr>
  <tr>
    <td>a.Add(value)</td>
    <td>Adds a new value/object to the end of the array.<br><eg>E.g.:<br>va=
r myArray =3D []<br>myArray.Add(10)</eg></td>
  </tr>
  <tr>
    <td>a.Clear()</td>
    <td>Removes all elements from the array, making it empty. This is more =
efficient than re-declaring the array with [].<br><eg>E.g.:<br>var myArray =
=3D [10, 3]<br>myArray.Clear()</eg></td>
  </tr>
  <tr>
    <td>a.Contains(value)</td>
    <td>Determines if a given value is inside the array. Returns true if fo=
und; false otherwise.<br><eg>E.g.:<br>var myArray =3D [10, 3]<br>?myArray.C=
ontains(3)<br>  &gt;Yes</eg></td>
  </tr>
  <tr>
    <td>a.Count()</td>
    <td>Returns the number of elements in the array.<br><eg>E.g.:<br>var my=
Array =3D ["apple","banana"]<br>var size =3D myArray.Count()<br>&gt;Array s=
ize =3D @size@</eg></td>
  </tr>
  <tr>
    <td>a.Emplace(integer, value)</td>
    <td>Replaces the value at a given position with a new value.<br><eg>E.g=
.:<br>var myArray =3D [10, 3]<br>myArray.Emplace(0, 4)<br>var value =3D myA=
rray[0]<br>&gt;Value at [0] is now @value@</eg></td>
  </tr>
  <tr>
    <td>a.IndexOf(value)</td>
    <td>Searches for a given value inside the array. Returns an integer ind=
icating the position of the first occurrance of the value. If the value is =
not found returns -1.<br><eg>E.g.:<br>var myArray =3D [10, 3]<br>var index =
=3D myArray.IndexOf(3)<br>&gt;Found at position @index@</eg></td>
  </tr>
  <tr>
    <td>a.Insert(integer, value)</td>
    <td>Adds a new value/object to a specific position of the array. Elemen=
ts to the right are shifted to the next position.<br><eg>E.g.:<br>var myArr=
ay =3D [10, 3]<br>myArray.Insert(1, "apple")<br>// The array is now [10, "a=
pple", 3]</eg></td>
  </tr>
  <tr>
    <td>a.RemoveAt(integer)</td>
    <td>Removes an element in the array from a specific position. Returns t=
he value removed.<br>Zero-based: <eg>myArray.RemoveAt(0)</eg> removes the f=
irst element.<br>Elements to the right are shifted to the previous position=
.<br><eg>E.g.:<br>var myArray =3D [1, 2, 3]<br>myArray.RemoveAt(1)<br>// Th=
e array is now [1, 3]</eg></td>
  </tr>
  <tr>
    <td>a.Sort()</td>
    <td>Organizes the array's elements into ascending order. If the array c=
ontains objects of different types it will still be sorted, but no expected=
 results are defined and elements are not guaranteed to be grouped by type.=
<br><eg>E.g.:<br>var myArray =3D ["Cherry", 2, "Apple", 1, true, false, "Ba=
nana", 3]<br>var value<br><br>myArray.Sort()<br><br>for i =3D 0 .. myArray.=
Count() - 1<br>  value =3D myArray[i]<br>  &gt;`0,@i@,@value@</eg></td>
  </tr>
</tbody></table>

Here are some of the different ways to initialize and use arrays:
<eg>
var emptyCollection =3D []

var magicNumbers =3D [10, 3, 0, 15, -7]

var someStrings =3D ["apple", "banana", "cherry"]

var sameButMultiLine =3D [
  "apple",
  "banana",
  "cherry",
]

var redeclaredEachFrame
redeclaredEachFrame =3D [] // Not good for the PC

var clearedEachFrame =3D []
clearedEachFrame.Clear() // Better for CPU &amp; memory

var clearedEachLoop =3D []
?loc.begin | loc.loop
  clearedEachLoop.Clear()

var multiDimensional =3D [[], [], []]

var objectCollection =3D [
  new Components/Float,
  new Components/Float,
  new Components/Vector,
]

var animationFrames =3D [ascii
=E2=94=80=E2=94=80=E2=94=80=E2=94=BC
  O/
 /|
 / \
asciiend
^,ascii
   ---.
  O    \
 /|\=E2=94=BC=E2=94=80=E2=94=80=E2=94=80
 / \
asciiend
^]
</eg>

Looping through arrays:
<eg>
var myArray =3D ["Apple", "Banana", "Cherry"]
var count
var value

count =3D myArray.Count()
?count &gt; 0
  for i =3D 0 .. count - 1
    value =3D myArray[i]
    &gt;`0,@i@,@value@

// This example prints fruit names to the left of the screen
</eg>

Multi-dimensional access:
<eg>
var a =3D [[1,2], [3,4]]
var value

value =3D a[1][0]
&gt;Found value @value@ at (1, 0)
</eg></f></font>

<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"custom-input"><div id=3D"separator"><!--------------------------=
-></div>

=C2=B7:=C2=B7:=C2=B7 Custom Input =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
Stonescript can read player inputs by use of the ?key game state. This can =
be used to drive advanced behaviors, such as different modes for the AI, bu=
t custom inputs allow the creation of entirely new experiences layered on t=
op of Stone Story.

<eg><f>In this example, the @ symbol can be moved across the screen like th=
e main character in a classic Rogue-like game. The key codes (leftBegin, et=
c) refer to the initial downpress of the button.

var x =3D 0
var y =3D 0

?key =3D leftBegin
  x--
  ?x &lt; 0
    x =3D 0
?key =3D rightBegin
  x++

?key =3D upBegin
  y--
  ?y &lt; 0
    y =3D 0
?key =3D downBegin
  y++

&gt;`@x@,@y@,#ffffff,@
</f></eg>

Table with all the available key codes:

<table>
  <tbody><tr>
    <td>Held<br>----</td>
    <td>Pressed<br>-------</td>
    <td>Released<br>--------</td>
	<td>Default PC<br>----------</td>
  </tr>
  <tr>
    <td>left</td>
    <td>leftBegin</td>
    <td>leftEnd</td>
	<td>A or =E2=86=90</td>
  </tr>
  <tr>
    <td>right</td>
    <td>rightBegin</td>
    <td>rightEnd</td>
	<td>D or =E2=86=92</td>
  </tr>
  <tr>
    <td>up</td>
    <td>upBegin</td>
    <td>upEnd</td>
	<td>W or =E2=86=91</td>
  </tr>
  <tr>
    <td>down</td>
    <td>downBegin</td>
    <td>downEnd</td>
	<td>S or =E2=86=93</td>
  </tr>
  <tr>
	<td>primary</td>
	<td>primaryBegin</td>
	<td>primaryEnd</td>
	<td>LMB, Return</td>
  </tr>
  <tr>
	<td>back</td>
	<td>backBegin</td>
	<td>backEnd</td>
	<td>X</td>
  </tr>
  <tr>
	<td>ability1</td>
	<td>ability1Begin</td>
	<td>ability1End</td>
	<td>Shift</td>
  </tr>
  <tr>
	<td>ability2</td>
	<td>ability2Begin</td>
	<td>ability2End</td>
	<td>Control</td>
  </tr>
  <tr>
	<td>bumpL</td>
	<td>bumpLBegin</td>
	<td>bumpLEnd</td>
	<td>Z</td>
  </tr>
  <tr>
	<td>bumpR</td>
	<td>bumpRBegin</td>
	<td>bumpREnd</td>
	<td>C</td>
  </tr>
</tbody></table></font>
<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"user-interface"><div id=3D"separator"><!------------------------=
---></div>

=C2=B7:=C2=B7:=C2=B7 User Interface =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
Buttons, text, animations... Stonescript provides a system for building com=
plex layouts and high performance User Interfaces. An invisible "root" Pane=
l exists by default, at the base of the system. Various other UI elements c=
an be added to the root Panel, including additional Panels, forming a tree =
structure. All elements are drawn together, in a single step, in the order =
in which they are added.
<eg><f>
root
=E2=94=82
=E2=94=9C=E2=94=80 Panel
=E2=94=82  =E2=94=9C=E2=94=80 Text
=E2=94=82  =E2=94=9C=E2=94=80 ASCII-art
=E2=94=82  =E2=94=94=E2=94=80 Button
=E2=94=82
=E2=94=9C=E2=94=80 Panel
=E2=94=82  =E2=94=9C=E2=94=80 Panel
|  |  =E2=94=94=E2=94=80 Text
...
</f></eg>

<table>
  <tbody><tr><td>UI<br>=E2=80=BE=E2=80=BE</td><td>Call functions in the <eg=
>ui</eg> namespace to build the interface.</td></tr>
  <tr>
    <td>ui.root<br><eg>Panel</eg></td>
    <td>The base UI object on top of which the entire tree is built.<eg><br=
>E.g.<br>disable hud<br>ui.root.visible =3D true</eg></td>
  </tr>
  <tr>
    <td>ui.AddAnim(string)<br><eg>Returns Anim</eg></td>
    <td>Adds an Anim object to the root Panel. Accepts an animation sprite =
sheet as parameter.<eg><br>E.g.<br>?loc.begin<br>  ui.AddAnim(ascii<br>\o)<=
br>%%<br>(o/<br>asciiend)</eg></td>
  </tr>
  <tr>
    <td>ui.AddButton()<br><eg>Returns Button</eg></td>
    <td>Adds a Button object to the root Panel.<eg><br>E.g.<br>func OnPress=
ed()<br>  &gt; Hello World!<br><br>?loc.begin<br>  var button =3D ui.AddBut=
ton()<br>  button.y =3D 1<br>  button.text =3D Press me<br>  button.SetPres=
sed(OnPressed)</eg></td>
  </tr>
  <tr>
    <td>ui.AddPanel()<br><eg>Returns Panel</eg></td>
    <td>Adds a Panel object to the root Panel. Panels are an important obje=
ct type, serving as containers for other elements.<eg><br>E.g.<br>?loc.begi=
n<br>  var p =3D ui.AddPanel()<br>  p.color =3D #red</eg></td>
  </tr>
  <tr>
    <td>ui.AddStyle()<br><eg>Returns int</eg></td>
    <td>Adds a new style that can be used for drawing rectangular Component=
s such as Panels and Buttons. Returns an ID number of the new style. Is pro=
tected against the same style being added multiple times, in which case not=
hing changes and the same ID is returned. Because different scripts may all=
 call ui.AddStyle(), it's recommended to save the ID as a variable instead =
of hard-coding style numbers into the script.<eg><br>E.g.<br>var customStyl=
e =3D ui.AddStyle("<br>^123<br>^456<br>^789")<br>?loc.begin<br>  var p =3D =
ui.AddPanel()<br>  p.style =3D customStyle</eg></td>
  </tr>
  <tr>
    <td>ui.AddText()<br>ui.AddText(string)<br><eg>Returns Text</eg></td>
    <td>Adds a Text object to the root Panel.<eg><br>E.g.<br>?loc.begin<br>=
  var t =3D ui.AddText()<br>  t.text =3D "Hello World!"</eg></td>
  </tr>
  <tr>
    <td>ui.Clear()<br><eg>No return value</eg></td>
    <td>Removes all UI elements from the main container.<eg><br>E.g.<br>?ke=
y =3D backBegin<br>  ui.Clear()</eg></td>
  </tr>
  <tr><td><br>Component<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=E2=
=80=BE=E2=80=BE=E2=80=BE=E2=80=BE</td><td><br>Component is a base type for =
all other UI types. This means that other elements (Panels, Text, Buttons a=
nd Anim) all have the following properties:</td></tr>
  <tr>
    <td>component.x<br><eg>integer</eg></td>
    <td>The X position of the component relative to its docked position.</t=
d>
  </tr>
  <tr>
    <td>component.y<br><eg>integer</eg></td>
    <td>The Y position of the component relative to its docked position.</t=
d>
  </tr>
  <tr>
    <td>component.w<br><eg>integer</eg></td>
    <td>The component's width. Default value varies by object type.<br><eg>=
E.g.<br>button.w =3D string.Size(button.text) + 4<br>// Sizes a button to f=
it its current text, +2 on each side</eg></td>
  </tr>
  <tr>
    <td>component.h<br><eg>integer</eg></td>
    <td>The component's height. Default value is 5.<br><eg>E.g.<br>panel.h =
=3D panel.parent.h<br>// Sets the height of a panel to match the height of =
its parent panel</eg></td>
  </tr>
  <tr>
    <td>component.absoluteX<br>component.absoluteY<br><eg>integer<br>read-o=
nly</eg></td>
    <td>The component's position relative to the screen.<br><eg>E.g.<br>var=
 t<br>?loc.begin<br>  var p =3D ui.AddPanel()<br>  p.anchor =3D bottom_righ=
t<br>  p.dock =3D bottom_right<br>  t =3D ui.AddText("Foo")<br>  p.Add(t)<b=
r>`0,1,Relative pos =3D @t.x@,@t.y@<br>&gt;`0,2,Absolute pos =3D @t.absolut=
eX@,@t.absoluteY@</eg></td>
  </tr>
  <tr>
    <td>component.anchor<br><eg>string</eg></td>
    <td>Auto-layout property representing the internal pivot of the compone=
nt. This guides the UI system on how to position the component relative to =
itself. Default value is "center_center". Possible values: top_left, top_ce=
nter, top_right, center_left, center_center, center_right, bottom_left, bot=
tom_center and bottom_right.</td>
  </tr>
  <tr>
    <td>component.dock<br><eg>string</eg></td>
    <td>Auto-layout property similar to <eg>anchor</eg>. However, <eg>dock<=
/eg> represents the external pivot, or position inside the parent where to =
position the component. If in doubt, use the same value for both <eg>anchor=
</eg> and <eg>dock</eg>, which is the most common situation.<br><eg>E.g.<br=
>?loc.begin<br>  var p =3D ui.AddPanel()<br>  p.anchor =3D top_right<br>  p=
.dock =3D top_right<br>  p.w =3D 20<br>  p.h =3D 9<br>  var t =3D ui.AddTex=
t("HelloWorld!")<br>  t.anchor =3D left_bottom<br>  t.dock =3D bottom_left<=
br>  t.x =3D 2<br>  t.h =3D t.lines.Count() + 1<br>  p.Add(t)</eg></td>
  </tr>
  <tr>
    <td>component.ax<br><eg>string</eg></td>
    <td>The X part of the <eg>anchor</eg>. Possible values: left, center an=
d right.</td>
  </tr>
  <tr>
    <td>component.ay<br><eg>string</eg></td>
    <td>The Y part of the <eg>anchor</eg>. Possible values: top, center and=
 bottom.</td>
  </tr>
  <tr>
    <td>component.dx<br><eg>string</eg></td>
    <td>The X part of the <eg>dock</eg>. Possible values: left, center and =
right.</td>
  </tr>
  <tr>
    <td>component.dy<br><eg>string</eg></td>
    <td>The Y part of the <eg>dock</eg>. Possible values: top, center and b=
ottom.<br><eg>E.g.<br>var p<br>?loc.begin<br>  p =3D ui.AddPanel()<br>  p.a=
x =3D right<br>  p.ay =3D top<br>  p.dx =3D right<br>  p.dy =3D top</eg></t=
d>
  </tr>
  <tr>
    <td>component.parent<br><eg>Panel<br>read-only</eg></td>
    <td>Reference to the component's parent Panel. May refer to the <eg>roo=
t</eg> Panel if the component was created but never added to another Panel.=
 When <eg>panel.Add(component)</eg> is called the component's parent change=
s.</td>
  </tr>
  <tr>
    <td>component.visible<br><eg>multi type<br>bool/string</eg></td>
    <td>Visibility of the component. Default value is "inherit". Possible v=
alues: true, false and inherit. If set to 'true', the component will always=
 be visible, ignoring the status of its parent. If set to 'false', the comp=
onent will be invisible, regardless of its parent. However, if set to 'inhe=
rit', the component will follow the visibility of its parent.</td>
  </tr>
  <tr>
    <td>component.Recycle()<br><eg>No return value</eg></td>
    <td>Removes the component from its parent Panel. It will be repurposed =
in future ui.Add_() calls. Any variable references to the recycled element =
should be nulled or reassigned to avoid bugs.</td>
  </tr>
  <tr><td><br>Panel &gt; Component<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=
=E2=80=BE</td><td><br>Panels are rectangular Components that serve as conta=
iners for other Components. A chain of Panels added to each other form a tr=
ee structure.</td></tr>
  <tr>
    <td>panel.children<br><eg>Component[]</eg></td>
    <td>Array with all the child components that have been added to the Pan=
el with <eg>panel.Add()</eg>.</td>
  </tr>
  <tr>
    <td>panel.clip<br><eg>bool</eg></td>
    <td>Indicates if the bounds of Panel should be used to contrain the dra=
wing of child components. If true, parts of child components that fall outs=
ide of the Panel's bounds will not draw.<br><eg>E.g.<br>var p<br>?loc.begin=
<br>  p =3D ui.AddPanel()<br>  p.w =3D 4<br>  p.h =3D 3<br>  var t =3D ui.A=
ddText("The quick brown fox jumps<br>^ over the lazy dog.")<br>  p.Add(t)<b=
r><br>?time%30 &lt; 15<br>  p.clip =3D true<br>:<br>  p.clip =3D false</eg>=
</td>
  </tr>
  <tr>
    <td>panel.color<br><eg>string</eg></td>
    <td>The panels color, in <a href=3D"https://htmlcolorcodes.com/" target=
=3D"_blank">RGB hexadecimal format</a>.</td>
  </tr>
  <tr>
    <td>panel.style<br><eg>int</eg></td>
    <td>ID number of the Panel's current style. Default value is 1. Possibl=
e values from -8 to 8. Additional styles can be added with <eg>ui.AddStyle(=
)</eg></td>
  </tr>
  <tr>
    <td>panel.Add(Component)<br>panel.Add(Component, int)<br><eg>No return =
value</eg></td>
    <td>Adds a Component to a Panel. The Component becomes a child of the P=
anel and the Panel becomes the parent of the Component. The order in which =
elements are added to a Panel affects the draw order. Components may be ins=
erted to a specific sorting position by use of the optional integer paramet=
er. No integer parameter means the Component is added as the last child of =
the Panel. This function can also be used for changing the draw order of Co=
mponents that are already children of the Panel.</td>
  </tr>
  <tr>
    <td>panel.Clear()<br><eg>No return value</eg></td>
    <td>Removes all UI elements from the Panel. Components removed this way=
 are recycled into the UI system and will be repurposed in future ui.Add_()=
 calls. Any variable references to those elements should be nulled or reass=
igned to avoid bugs.</td>
  </tr>
  <tr>
    <td>panel.Remove(Component)<br>panel.Remove(int)<br><eg>No return value=
</eg></td>
    <td>Removes a specific Component from a Panel or removes the Component =
at a specified index number. Components removed this way are recycled into =
the UI system and will be repurposed in future ui.Add_() calls. Any variabl=
e references to those elements should be nulled or reassigned to avoid bugs=
.</td>
  </tr>
  <tr><td><br>Text &gt; Component<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE</=
td><td><br>Multi-line text box. Supports color metadata.</td></tr>
  <tr>
    <td>text.align<br><eg>string</eg></td>
    <td>The alignment/justification of the text inside the box. Default val=
ue is "left". Possible values: left, center and right.</td>
  </tr>
  <tr>
    <td>text.color<br><eg>string</eg></td>
    <td>The color of the text, in <a href=3D"https://htmlcolorcodes.com/" t=
arget=3D"_blank">RGB hexadecimal format</a>.</td>
  </tr>
  <tr>
    <td>text.lines<br><eg>string[]</eg></td>
    <td>Array of strings that are the broken-down lines of text after the T=
ext box has formatted its contents. Excludes color metadata.</td>
  </tr>
  <tr>
    <td>text.text<br><eg>string</eg></td>
    <td>The full contents of the Text box. A subsection of the text may be =
colored with the metadata [color=3D#rrggbb][/color].<br><eg>E.g.<br>?loc.be=
gin<br>  var t =3D ui.AddText()<br>  t.text =3D "Hello [color=3D#red]World[=
/color]!"</eg></td>
  </tr>
  <tr><td><br>Button &gt; Component<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=
=E2=80=BE=E2=80=BE</td></tr>
  <tr>
    <td>button.text<br><eg>string</eg></td>
    <td>The text that appears inside the button.<br><eg>E.g.<br>button.text=
 =3D player.name<br>// Put your name on the button!</eg></td>
  </tr>
  <tr>
    <td>button.tcolor<br><eg>string</eg></td>
    <td>The color of the text inside the button, in <a href=3D"https://html=
colorcodes.com/" target=3D"_blank">RGB hexadecimal format</a>.<br><eg>E.g.<=
br>button.tcolor =3D #ff0000<br>// Sets the button text color to red</eg></=
td>
  </tr>
  <tr>
    <td>button.bcolor<br><eg>string</eg></td>
    <td>The color of the button's border, in <a href=3D"https://htmlcolorco=
des.com/" target=3D"_blank">RGB hexadecimal format</a>.<br><eg>E.g.<br>&gt;=
@button.bcolor@<br>button.bcolor =3D #880000<br>// Prints the border's curr=
ent color, then sets it to a dark red</eg></td>
  </tr>
  <tr>
    <td>button.hcolor<br><eg>string</eg></td>
    <td>The color of the button's highlight when it's pressed, in <a href=
=3D"https://htmlcolorcodes.com/" target=3D"_blank">RGB hexadecimal format</=
a>.<br><eg>E.g.<br>?loc.begin<br>  var b =3D ui.AddButton()<br>  b.hcolor =
=3D #yellow</eg></td>
  </tr>
  <tr>
    <td>button.sound<br><eg>string</eg></td>
    <td>The <a href=3D"https://stonestoryrpg.com/stonescript/manual.html#so=
unds">sound effect</a> that plays when the button is pressed. Default is "c=
onfirm".<br><eg>E.g.<br>button.sound =3D buy<br>// Changes the button so it=
 plays the buying sound when pressed</eg></td>
  </tr>
  <tr>
    <td>button.style<br><eg>int</eg></td>
    <td>ID number of the Buttons's current style. Default value is 1. Possi=
ble values from -8 to 8. Additional styles can be added with <eg>ui.AddStyl=
e()</eg></td>
  </tr>
  <tr>
    <td>button.SetPressed(f)<br><eg>function callaback</eg></td>
    <td>Assigns a function to be called when the button is pressed. The fun=
ction can have any number of parameters (even no parameters). When the func=
tion is called, the first parameter will be a reference to the button itsel=
f.<br><eg>E.g.<br>var button1<br>var button2<br>func OnPressed(btn)<br>  ?b=
tn =3D button1<br>    &gt;Button1 was pressed<br>  :<br>    &gt;Button2 was=
 pressed<br><br>?loc.begin<br>  button1 =3D ui.AddButton()<br>  button1.y =
=3D 1<br>  button1.SetPressed(OnPressed)<br><br>  button2 =3D ui.AddButton(=
)<br>  button2.y =3D 6<br>  button2.SetPressed(OnPressed)</eg></td>
  </tr>
  <tr>
    <td>button.SetDown(f)<br><eg>function callaback</eg></td>
    <td>Similar to .SetPressed(), .SetDown() assigns a function to be calle=
d when the button press begins (first user contact).</td>
  </tr>
  <tr>
    <td>button.SetUp(f)<br><eg>function callaback</eg></td>
    <td>Similar to .SetPressed(), .SetUp() assigns a function to be called =
when a depress ends on top of the button (last user contact).<br><eg>E.g.<b=
r>func OnDown()<br>  &gt; Down!<br><br>func OnUp()<br>  &gt; Up!<br><br>?lo=
c.begin<br>  var button =3D ui.AddButton()<br>  button.y =3D 1<br>  button.=
text =3D Press me<br>  button.SetDown(OnDown)<br>  button.SetUp(OnUp)</eg><=
/td>
  </tr>
  <tr><td><br>Anim &gt; Component<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE</=
td><td><br>ASCII sprite-sheet animations that can be added to UI.</td></tr>
  <tr>
    <td>anim.color<br><eg>string</eg></td>
    <td>The animation's color, in <a href=3D"https://htmlcolorcodes.com/" t=
arget=3D"_blank">RGB hexadecimal format</a>.</td>
  </tr>
  <tr>
    <td>anim.duration<br><eg>int</eg></td>
    <td>Time length of the animation, in frames.</td>
  </tr>
  <tr>
    <td>anim.flipX<br><eg>bool</eg></td>
    <td>If true, flips the art horizontally, over its pivot.</td>
  </tr>
  <tr>
    <td>anim.flipY<br><eg>bool</eg></td>
    <td>If true, flips the art vertically, over its pivot.</td>
  </tr>
  <tr>
    <td>anim.frame<br><eg>int</eg></td>
    <td>Current animation frame being drawn. Can be changed to set an anima=
tion to a specific frame.</td>
  </tr>
  <tr>
    <td>anim.gamePause<br><eg>bool</eg></td>
    <td>If true, the animation automatically pauses playback if the player =
pauses the game and resumes playback if the player exits the pause screen.<=
/td>
  </tr>
  <tr>
    <td>anim.loop<br><eg>bool</eg></td>
    <td>If true, the animation will restart from the begining as soon as it=
 reaches the end of its duration.</td>
  </tr>
  <tr>
    <td>anim.playing<br><eg>bool<br>read-only</eg></td>
    <td>True if the animation is currently playing.</td>
  </tr>
  <tr>
    <td>anim.paused<br><eg>bool<br>read-only</eg></td>
    <td>True if the animation is playing, but has been paused with a call t=
o <eg>anim.Pause()</eg>.</td>
  </tr>
  <tr>
    <td>anim.pivotX<br>anim.pivotY<br><eg>int</eg></td>
    <td>Additional pivot offset that can be used for fine-tuning where the =
ASCII-art draws in relationship to its position.</td>
  </tr>
  <tr>
    <td>anim.playOnStart<br><eg>bool</eg></td>
    <td>If true, the animation will begin playing as soon as possible.</td>
  </tr>
  <tr>
    <td>anim.AddLayer(string)<br><eg>Returns Anim</eg></td>
    <td>Adds a new ASCII sprite on top of this one. As the animation plays =
(or its frame is changed with <eg>anim.frame</eg>) all layers stay in sync.=
 Each layer has their own set of properties for color, pivot, etc. Advantag=
es of using animation layers for complex ASCII-art include improved perform=
ance and better code quality. If the animation is recycled all layers clean=
 up simultaneously.<eg><br>E.g.<br>var a =3D ui.AddAnim(asciiArtA)<br>var l=
ayer2 =3D a.AddLayer(asciiArtB)<br>layer2.color =3D #bbbbbb</eg></td>
  </tr>
  <tr>
    <td>anim.Load(string)<br><eg>No return value</eg></td>
    <td>Assigns a new ASCII sprite sheet.</td>
  </tr>
  <tr>
    <td>anim.Pause()<br><eg>No return value</eg></td>
    <td>Suspends playback of the animation at its current frame. A subseque=
nt call to <eg>anim.Play()</eg> resumes playback.</td>
  </tr>
  <tr>
    <td>anim.Play()<br><eg>No return value</eg></td>
    <td>Begins playing the animation, or resumes playback in case it had be=
en paused.<br><eg>E.g.<br>var dance<br>?loc.begin<br>  dance =3D ui.AddAnim=
(ascii<br>(O/<br>%%<br>\O)<br>asciiend)<br>  dance.duration =3D 20<br>  dan=
ce.loop =3D true<br>  dance.Play()</eg></td>
  </tr>
  <tr>
    <td>anim.Stop()<br><eg>No return value</eg></td>
    <td>Suspends playback and sets the animation back to its first frame.</=
td>
  </tr>
  <tr><td><br>Canvas &gt; Component<br>=E2=80=BE=E2=80=BE=E2=80=BE=E2=80=BE=
=E2=80=BE=E2=80=BE</td><td><br>Container optimized for drawing arbitrary gl=
yphs and colors.</td></tr>
  <tr>
    <td>canvas.blend<br><eg>string</eg></td>
    <td>The blend mode of the canvas, when composed with elements behind it=
. Possible values: Opaque, Multiply, Divide, Add, Subtract. Default value i=
s "opaque".<br><eg>E.g.<br>var filter1 =3D ui.AddCanvas()<br>var filter2 =
=3D ui.AddCanvas()<br>filter1.w =3D screen.w<br>filter1.h =3D screen.h<br>f=
ilter2.w =3D screen.w<br>filter2.h =3D screen.h<br><br>filter1.blend =3D mu=
ltiply
<br>filter1.SetFG(#aa5555)<br>filter1.SetBG(#dddddd)<br><br>filter2.blend =
=3D add
<br>filter2.SetFG(#aa6600)<br>filter2.SetBG(#662200)</eg></td>
  </tr>
  <tr>
    <td>canvas.Get(int,int)<br><eg>Returns string</eg></td>
    <td>Returns the glyph at a specific position x,y on the canvas.</td>
  </tr>
  <tr>
    <td>canvas.Set(str)<br><eg>No return value</eg></td>
    <td>Fills the entire canvas with a given glyph.<br><eg>E.g.<br>?loc.beg=
in<br>  var canvas =3D ui.AddCanvas()<br>  canvas.Set("X")</eg></td>
  </tr>
  <tr>
    <td>canvas.Set(int,int,str)<br><eg>No return value</eg></td>
    <td>Changes a specific position x,y on the canvas to a given glyph.<br>=
<eg>E.g.<br>?loc.begin<br>  var canvas =3D ui.AddCanvas()<br>  canvas.Set(0=
, 0, "A")</eg></td>
  </tr>
  <tr>
    <td>canvas.Set(int,int, fg,str)<br>canvas.Set(int,int, fg,bg,str)<br><e=
g>No return value</eg></td>
    <td>Overloads for changing a canvas at a specific position, while simul=
taneously setting the foreground and background colors.<br><eg>E.g.<br>?loc=
.begin<br>  var canvas =3D ui.AddCanvas()<br>  for x =3D 0..canvas.w<br>   =
 for y =3D 0..canvas.h<br>      var fg =3D color.Random()<br>      var bg =
=3D color.Random()<br>      canvas.Set(x, y, fg, bg, =E2=96=84)</eg></td>
  </tr>
  <tr>
    <td>canvas.SetFG(color)<br><eg>No return value</eg></td>
    <td>Sets a foreground color to the entire canvas.<br><eg>E.g.<br>?loc.b=
egin<br>  var canvas =3D ui.AddCanvas()<br>  canvas.Set("R")<br>  canvas.Se=
tFG(#red)</eg></td>
  </tr>
  <tr>
    <td>canvas.SetFG(int,int, color)<br><eg>No return value</eg></td>
    <td>Changes the foreground color at a specific position x,y.<br><eg>E.g=
.<br>?loc.begin<br>  var canvas =3D ui.AddCanvas()<br>  canvas.Set("X")<br>=
  canvas.SetFG(2, 1, #ff00ff)<br></eg></td>
  </tr>
  <tr>
    <td>canvas.SetBG(color)<br><eg>No return value</eg></td>
    <td>Sets a background color to the entire canvas.<br><eg>E.g.<br>?loc.b=
egin<br>  var canvas =3D ui.AddCanvas()<br>  canvas.Set("g")<br>  canvas.Se=
tBG(#00aa00)</eg></td>
  </tr>
  <tr>
    <td>canvas.SetBG(int,int, color)<br><eg>No return value</eg></td>
    <td>Changes the background color at a specific position x,y.<br><eg>E.g=
.<br>?loc.begin<br>  var canvas =3D ui.AddCanvas()<br>  canvas.Set("X")<br>=
  canvas.SetBG(2, 1, #yellow)</eg></td>
  </tr>
</tbody></table></font>
<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"tips"><div id=3D"separator"><!---------------------------></div>

=C2=B7:=C2=B7:=C2=B7 Tips =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
<f>Space (indentation) matters when defining what happens as a result of '?=
' comparisons (scope).</f>

<f>The script can be changed in the middle of a run by pressing 'M' on your=
 keyboard.</f>

<f>The Power button in the top-right of the Mind Stone turns the script ON/=
OFF.</f>

<f>If multiple equip Commands are called, whichever comes last will occur.<=
/f>

<f>The script executes 30 times per second (once per frame).</f>

<f>To experiment with different scripts it's recommended to copy them into =
an external text editor, such as Notepad.</f>

<f>Common shortcuts such as Ctrl+A, Ctrl+C and Ctrl+V are useful.</f>

<f>Holding the Tab key in-game gives you a lot of information about game st=
ate and shows a list of recent Stonescript errors.</f>

<f>A print command can be broken into multiple lines by using '\n' in the t=
ext.</f>
</font>

<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"default-script"><div id=3D"separator"><!------------------------=
---></div>

=C2=B7:=C2=B7:=C2=B7 Default script =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb"><f>
import UI/MindstoneButton

?hp &lt; 7
  activate potion
?loc =3D caves
  equipL sword
  equipR shield
  ?foe =3D boss
    equip crossbow
</f></font>

<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"ability_ids"><div id=3D"separator"><!---------------------------=
></div>

=C2=B7:=C2=B7:=C2=B7 Appendix - Ability Cooldown IDs =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb"><f>
<table>
  <tbody><tr>
    <td>Item<br>----</td>
    <td>Cooldown ID<br>-----------</td>
    <td><br></td>
  </tr>
  <tr>
    <td>=C3=86ther Talisman</td>
    <td>"talisman_aether"</td>
  </tr>
  <tr>
    <td>Bardiche</td>
    <td>"bardiche"</td>
  </tr>
  <tr>
    <td>Bashing Shield</td>
    <td>"bash"</td>
  </tr>
  <tr>
    <td>Blade of the Fallen God</td>
    <td>"blade"</td>
  </tr>
  <tr>
    <td>Cinderwisp Devour</td>
    <td>"cinderwisp"</td>
  </tr>
  <tr>
    <td>Cultist Mask</td>
    <td>"mask"</td>
  </tr>
  <tr>
    <td>Dashing Shield</td>
    <td>"dash"</td>
  </tr>
  <tr>
    <td>Fire Talisman</td>
    <td>"talisman_fire"</td>
  </tr>
  <tr>
    <td>Hatchet</td>
    <td>"hatchet"</td>
  </tr>
  <tr>
    <td>Heavy Hammer</td>
    <td>"heavy_hammer"</td>
  </tr>
  <tr>
    <td>Mind Stone</td>
    <td>"mind"</td>
  </tr>
  <tr>
    <td>Quarterstaff</td>
    <td>"quarterstaff"</td>
  </tr>
  <tr>
    <td>Skeleton Arm</td>
    <td>"skeleton_arm"</td>
  </tr>
  <tr>
    <td>Voidweaver Devour</td>
    <td>"voidweaver"</td>
  </tr>
  <tr>
    <td>Calamity Wand</td>
    <td>"wand_aether"</td>
  </tr>
  <tr>
    <td>Explosive Wand</td>
    <td>"wand_fire"</td>
  </tr>
  <tr>
    <td>Frost Wand</td>
    <td>"wand_ice"</td>
  </tr>
  <tr>
    <td>Plague Wand</td>
    <td>"wand_poison"</td>
  </tr>
  <tr>
    <td>Reset Wand</td>
    <td>"wand_vigor"</td>
  </tr>
  <tr>
    <td>Gravity Wand</td>
    <td>"wand_stone"</td>
  </tr>
  <tr>
    <td>Grasping Staff</td>
    <td>"staff_aether"</td>
  </tr>
  <tr>
    <td>Infernal Staff</td>
    <td>"staff_fire"</td>
  </tr>
  <tr>
    <td>Eternity Staff</td>
    <td>"staff_ice"</td>
  </tr>
  <tr>
    <td>Berserker Staff</td>
    <td>"staff_poison"</td>
  </tr>
  <tr>
    <td>Prevention Staff</td>
    <td>"staff_vigor"</td>
  </tr>
  <tr>
    <td>Acrobatic Staff</td>
    <td>"staff_stone"</td>
  </tr>
</tbody></table>
</f></font>
<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"sounds"><div id=3D"separator"><!---------------------------></di=
v>

=C2=B7:=C2=B7:=C2=B7 Appendix - Sound Effects =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
Stonescript can play sound effects from the game, based on custom logic.

<eg><f>In this example, the 'unequip' sound is played whenever the player l=
oses health:

var lasthp =3D hp
?hp &lt; lasthp
  play unequip
lasthp =3D hp</f></eg>

Most sounds have variations that either play randomly or sequentially. If t=
he same sound is played more than once in a single frame it will be ignored=
. If more than 5 sounds are played per second they will be throttled.

Here is the full list of sounds available in Stone Story RPG:

acronian_cultist_power_up
air_hiss
ant_attack
ant_death
ant_hill
ant_walk
auggie_voice
bang_go_forward
bardiche_cast
bat_attack
bat_attack_small
bat_death
bat_death_small
bat_wing
bat_wing_small
bearer3_talk
bearer4_talk
bearer4_talk_evolving
bearer5_talk
bearer_attack
bearer_attack_hit
bearer_death
bearer_evolving
bearer_scream
bearer_stealing
bearer_super_attack
bell_ringer_attack
bell_ringer_attack_hit
blade_drag
blade_glow
blade_pallas_attack
blade_raise
bomb_cart_explosion
bomb_cart_fuse
bomb_cart_move
boo_voice
booklet_close
booklet_open
booklet_turn_page
bronze_gate_close
bronze_gate_locked
bronze_gate_open
bronze_guardian_attack1
bronze_guardian_attack2
bronze_guardian_attack3
bronze_guardian_attack4
bronze_guardian_death
bronze_guardian_ears_ring
bronze_guardian_fuse
bronze_guardian_helmet
bronze_guardian_power_up
bronze_guardian_pulling_hammer
bronze_guardian_removing_hammer
bronze_guardian_steps
bronze_guardian_turbine
buy
click
confirm
controller_death
controller_whip_attack
controller_whip_hit
cross_deadwood_bump
cross_deadwood_row
cross_deadwood_splash
crossbow_cast
crossbow_hit
cult_guard_attack
cult_guard_attack_hit
cult_marksman_attack
cult_marksman_attack_hit
cult_sorcerer_attack
cult_sorcerer_attack_hit
cultist_death
devolved_talk
dog_bark
dominotaur_awake
dominotaur_death
dominotaur_whip_attack
dominotaur_whip_hit
dysangelos_guidance
dysangelos_guidance_1
dysangelos_guidance_2
dysangelos_guidance_3
dysangelos_intro_talk
elementalist_aether_attack
elementalist_aether_attack_hit
elementalist_aether_blink
elementalist_death
elementalist_evolving
elementalist_fire_attack
elementalist_fire_attack_hit
elementalist_fire_blink
elementalist_ice_attack
elementalist_ice_attack_hit
elementalist_ice_blink
elementalist_poison_attack
elementalist_poison_attack_hit
elementalist_poison_blink
elementalist_vigor_attack
elementalist_vigor_attack_hit
elementalist_vigor_blink
epilogue_devolving
epilogue_talk
epliogue_player_evolves
equip
error
falling_stonefolk
fire_beast_1
fire_beast_2
fire_elemental_attack
fire_elemental_attack_hit
fire_elemental_awake
fire_elemental_death
fire_geyser
fire_orbs
first_controller
fissure_break_apart
fissure_unmake
flying_serpent_loop
frog
ghost_attack
ghost_attack_small
ghost_death
ghost_death_small
ghost_loop
ghost_loop_small
ghost_tomb_death
giant_ice_elemental_attack
grappling_cast
grappling_hit
grappling_idle
hammer_cast
hammer_hit
hans_scream
hans_talk_intro
hans_talk_reward
hatchet_cast
hatchet_hit
haunted_gate_key_bounce_1
haunted_gate_key_bounce_2
haunted_gate_key_bounce_3
haunted_gate_key_into_gate
haunted_gate_npc_voice
haunted_gate_opening
haunted_gate_point_lost
haunted_gate_shuffle
haunted_gate_shuffle_fast
haunted_gate_torch_off
haunted_gate_torch_on
haunted_gate_try_to_open
ice_elemental_attack
ice_elemental_attack_hit
ice_elemental_awake
ice_elemental_death
ice_pillar
insta_kill
key_drop
ki_eater_attack
ki_eater_attack_hit
ki_eater_awake
ki_eater_death
ki_gobbler_attack
ki_gobbler_attack_hit
ki_gobbler_awake
ki_gobbler_death
ki_slerper_attack
ki_slerper_attack_hit
ki_slerper_awake
ki_slerper_death
ki_slerper_walk
level_up
life_gain
logo_full
logo_short
lost_item_boost
mask_summon_1
mask_summon_2
metal_drop
mindstone_found
mindstone_off
mindstone_on
mine_walker_attack_a
mine_walker_attack_b
mine_walker_attack_hit
mine_walker_awake
mine_walker_death
mine_walker_helmet_break
mine_walker_step
morel_punch
mosquito_attack
mosquito_death
mosquito_loop
mushroom_boss_awake
mushroom_boss_death
mushroom_boss_fat_slam
mushroom_boss_punch
mushroom_boss_shoot
mushroom_boss_split
nagaraja_attack_eat
nagaraja_attack_lick
nagaraja_attack_swallow
nagaraja_awake_roar
nagaraja_awake_swallow
nagaraja_awake_tongue_1
nagaraja_awake_tongue_2
nagaraja_choir
nagaraja_dead
nagaraja_poison_attack
nagaraja_poison_attack_hit
nagaraja_tongue_damaged
nagaraja_tongue_lift
nagaraja_tongue_smell
nagaraja_tongue_wrap
nagaraja_wail
nagaraja_wail_brick
open_note
paint_splat
pallas_voice
perfected_attack
perfected_attack_hit
perfected_death
perfected_defense
perfected_energy_ball
perfected_energy_ball_hit
perfected_fly_end
perfected_fly_loop
perfected_fly_start
perfected_summon
perfected_talk
pickup_bronze
pickup_stone
pickup_success
pickup_tar
pickup_wood
player_death
player_hit
player_kick
player_punch
poison_adept_attack
poison_adept_attack_hit
poison_powerup
potion_berserk
potion_cleansing
potion_defensive
potion_experience
potion_healing
potion_invisibility
potion_lightning
potion_lucky
potion_strength
potion_vampiric
progress_1
progress_2
progress_3
progress_4
progress_5
progress_6
progress_7
progress_8
progress_9
prompt_choice
quarterstaff_cast
quest_stone_jump
quest_stone_unlock
ranting_tree_halt
ranting_tree_talk_again
ranting_tree_talk_avenge
ranting_tree_talk_extra
ranting_tree_talk_get_out
ranting_tree_talk_halt
ranting_tree_talk_how_dare
ranting_tree_talk_impressive
ranting_tree_talk_very_well
scarab_awake
scarab_bite
scarab_death
scarab_horn
scarab_wings
scorpion_death
scotty_a_pleasure
scotty_a_worthy_opponent
scotty_deuced
scotty_failte_back
scotty_getting_good
scotty_grr
scotty_guess_which
scotty_hell_be_back
scotty_intro
scotty_lets_harden
scotty_make_ye_guess
scotty_noo_jist
scotty_out_of_treasure
scotty_perhaps_the_rules
scotty_pick_some_treasure
scotty_shall_we_up
scotty_there_he_is
scotty_we_have_wee_use
scotty_well_met
scotty_well_then
scotty_wizard
scotty_wrong_choice
scout_arrives
scout_dialog
scout_focus
scout_leaves
scout_wing
serpent_attack
serpent_death
serpent_handler_release
serpent_hiss
serpent_slither
shield_dash
shop_door_enter
shop_door_open
shovel_cast
sightstone_cast
skeletimmy_attack
skeletimmy_death
skeleton_boss_arm1
skeleton_boss_arm2
skeleton_boss_arm_reconnect
skeleton_boss_arm_woosh
skeleton_boss_attack
skeleton_boss_awake
skeleton_boss_bone_bounce
skeleton_boss_death
skeleton_boss_hand_slam
skeleton_boss_idle
skeleton_boss_legs_die
skeleton_boss_summon_minions
skeletony_attack
skeletony_awake_a
skeletony_awake_b
skeletony_death
skeletony_walk
slave_npc
slave_outro_chatter
slave_outro_transition
slave_outro_voice
smithy_hammer
smithy_hammer_fail
snail_attack
snail_attack_small
snail_death
snail_death_small
snail_walk
soul_stone
soul_stone_drop
spider_attack
spider_boss_attack
spider_boss_awake
spider_boss_death
spider_death
spider_death_small
spider_eggs_spawn
spider_walk
stone_throw_cast
stone_throw_hit
sword_cast
sword_hit
talisman_reveal
temple_npc_chant
temple_npc_clear_throat
temple_npc_talk
torch_cast
torch_hit
torch_idle
treasure_close
treasure_drop
treasure_drop_common
treasure_drop_epic
treasure_drop_giant
treasure_drop_humble
treasure_drop_rare
treasure_item_blue
treasure_item_cyan
treasure_item_green
treasure_item_lost
treasure_item_pop
treasure_item_rainbow
treasure_item_red
treasure_item_show
treasure_item_yellow
treasure_open
tree_boss_attack
tree_boss_awake
tree_boss_death
tree_boss_idle
tree_boss_spike
triskelion_fuse
ui_starfirst
ui_starnew
ui_starold1
ui_starold2
ui_starold3
ui_starold4
unequip
uulaa_voice
wand_aether_cast
wand_aether_hit
wand_air_cast
wand_air_hit
wand_cast
wand_drop
wand_fire_cast
wand_fire_hit
wand_hit
wand_ice_cast
wand_ice_hit
wand_poison_cast
wand_poison_hit
wand_vigor_cast
wand_vigor_hit
waterfall_hook_hit
waterfall_land
waterfall_rope_grab
waterfall_rope_swing
waterfall_splash
worm_rider_hop
xp_tick
yeti_attack
yeti_attack_flick
yeti_attack_hit
yeti_awake_blow
yeti_awake_explosion
yeti_awake_inhale
yeti_awake_lick
yeti_blow
yeti_blow_ice_wall
yeti_death
yeti_inhale
yeti_inhale_lick
</font>

<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"music"><div id=3D"separator"><!---------------------------></div=
>

=C2=B7:=C2=B7:=C2=B7 Appendix - Music =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
Stonescript can play music tracks from the game, based on custom logic. Ava=
ilable tracks depend on the platform.
<eg><f>
?loc.begin | loc.loop
  music.Play(temple_0)</f></eg>

Here is the full list of music available in Stone Story RPG:

<eg>Boiling Mine</eg>
bronze_guardian_3
bronze_guardian_4
bronze_guardian_5
bronze_guardian_cyan
bronze_mine_0
bronze_mine_1
bronze_mine_2
bronze_mine_3
bronze_mine_4
bronze_mine_5
bronze_mine_cyan
slave_outro_climb
slave_outro_loop

<eg>Caves of Fear</eg>
caustic_caves
spider_boss

<eg>Deadwood</eg>
cross_deadwood_river
cross_deadwood_wind
deadwood_0
deadwood_1
deadwood_2
deadwood_3
deadwood_4
deadwood_5
deadwood_cyan
tree_boss
waterfall_descent
poena

<eg>Haunted Halls</eg>
skeleton_boss
undead_crypt_0
undead_crypt_1
undead_crypt_2
undead_crypt_3
undead_crypt_4
undead_crypt_5
undead_crypt_cyan
undead_crypt_intro

<eg>Icy Ridge</eg>
bridge_broken
bridge_crossing
icy_ridge_0
icy_ridge_1
icy_ridge_2
icy_ridge_3
icy_ridge_4
icy_ridge_5
icy_ridge_cyan
yeti

<eg>Mushroom Forest</eg>
fire_loop
fungus_forest_0
fungus_forest_1
fungus_forest_2
fungus_forest_3
fungus_forest_4
fungus_forest_5
fungus_forest_cyan
mushroom_boss
mushroom_boss_cyan
shop

<eg>Rocky Plateau</eg>
rocky_plateau_0
rocky_plateau_1
rocky_plateau_2
rocky_plateau_3
rocky_plateau_4
rocky_plateau_5
rocky_plateau_epilogue
rocky_plateau_fight
rocky_plateau_talk

<eg>Temple</eg>
nagaraja
temple_0
temple_1
temple_2
temple_3
temple_4
temple_5
temple_cyan

<eg>Events</eg>
event_fall
event_hamartia
event_spring
event_stonejam
event_summer
event_winter

<eg>Other</eg>
credits
main_menu
bone_factory
osteophone
uulaa
</font>

<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"ambient"><div id=3D"separator"><!---------------------------></d=
iv>

=C2=B7:=C2=B7:=C2=B7 Appendix - Ambient Loops =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
Stonescript can play multiple layers of background ambient audio, based on =
custom logic.
<eg><f>
?loc.begin
  ambient.Stop()
  ambient.Add(ambient_crypt)</f></eg>

Here is the full list of ambient audio available in Stone Story RPG:

ambient_mines
ambient_caves
ambient_bronze_gate
ambient_deadwood
ambient_mushroom
ambient_bridge
ambient_icy
ambient_cave
ambient_rocky
ambient_temple
ambient_crypt
ambient_haunted_gate
ambient_pallas
waterfall_a
waterfall_b
waterfall_c
</font>

<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<div id=3D"scripts"><div id=3D"separator"><!---------------------------></d=
iv>

=C2=B7:=C2=B7:=C2=B7 Appendix - All importable scripts =C2=B7:=C2=B7:=C2=B7
<font color=3D"#bbbbbb">
import Chisel
import CozyCave
import Fishing
import TrainAdventure

import Cosmetics/Acrocorn
import Cosmetics/AcronianGuardian
import Cosmetics/AuroraBorealis
import Cosmetics/BadApple
import Cosmetics/Beach
import Cosmetics/Bolesh
import Cosmetics/CaveParty
import Cosmetics/ChristmasTree
import Cosmetics/ChrWings
import Cosmetics/ConfettiHead
import Cosmetics/CultGroup
import Cosmetics/DragonWorm
import Cosmetics/Drill
import Cosmetics/Explosion
import Cosmetics/FireFly
import Cosmetics/Fireworks
import Cosmetics/FrogInvasion
import Cosmetics/Giftbag
import Cosmetics/Infected
import Cosmetics/Knight
import Cosmetics/Mech
import Cosmetics/MineManager
import Cosmetics/MushroomAnt
import Cosmetics/MushroomHead
import Cosmetics/Party
import Cosmetics/PartyNoisemaker
import Cosmetics/Portobello
import Cosmetics/PumpkinCarving
import Cosmetics/Pumpkins
import Cosmetics/quips
import Cosmetics/SantaFlyingSleigh
import Cosmetics/SillyGoose
import Cosmetics/SleepyStonehead
import Cosmetics/SpookyScarySkeletons
import Cosmetics/SpringBloom
import Cosmetics/StoneClause
import Cosmetics/StoneheadFall
import Cosmetics/StoneHeadless
import Cosmetics/StonePhone
import Cosmetics/SuperStoneHead
import Cosmetics/TheSun
import Cosmetics/Turret
import Cosmetics/TwinSuns
import Cosmetics/WavyScarf
import Cosmetics/WitchBroom

import Foes/FlowerFoes
import Foes/PallasCrown
import Foes/PumpkinWraith
import Foes/SurferGuardian

import Games/2048
import Games/Arena
import Games/Asteroids
import Games/Blackjack
import Games/BurgerRush
import Games/cColorTetris
import Games/cGomoku
import Games/cTetris
import Games/DigitsPuzzle
import Games/FeedABat
import Games/FlyupText
import Games/FrogBog
import Games/FrogJump
import Games/GetawayDriver
import Games/GrowPlants
import Games/KillerRPG
import Games/Metallophone
import Games/Minesweeper
import Games/PlayingCards
import Games/Simon
import Games/Snake
import Games/SpearThrowing
import Games/SSRPGIdle
import Games/StoneasaurGame
import Games/StoneBoxman
import Games/StoneDungeon
import Games/Stonemon
import Games/Sudoku
import Games/SudokuEnchant
import Games/SwordGame
import Games/TowerDefense
import Games/WhackaMole

import Hats/CatHat
import Hats/ChefHat
import Hats/DefectFaceplate
import Hats/DiscoVisor
import Hats/Enchanthead
import Hats/Headphones
import Hats/Helmet
import Hats/HrimnirHair
import Hats/IroncladMask
import Hats/JesterHat
import Hats/LanternTalisman
import Hats/MushroomHat
import Hats/PirateHat
import Hats/ReindeerHead
import Hats/SantaHat
import Hats/ShuffleHat
import Hats/SilentSkull
import Hats/Skully
import Hats/StarCloak
import Hats/Treeman
import Hats/WitchHat

import Pets/Bear
import Pets/BlackHole
import Pets/Boo
import Pets/Bunny
import Pets/CatBalloon
import Pets/CavePets
import Pets/Chick
import Pets/Crab
import Pets/Cranius
import Pets/Dog
import Pets/Dracula
import Pets/Dragon
import Pets/Fly
import Pets/FoesNoMore
import Pets/Frog
import Pets/JackOLantern
import Pets/LegsTurkey
import Pets/Mushroom
import Pets/Panda
import Pets/Pomeranian
import Pets/RoyaltyDeliverer
import Pets/Skully
import Pets/Snail
import Pets/SnowBunny
import Pets/Snowman
import Pets/Spider
import Pets/SpringBuddy
import Pets/Stonehead
import Pets/Sun
import Pets/TarPusher
import Pets/Wisp

import UI/A2S
import UI/BetterInfo2
import UI/BetterText
import UI/BorderClock
import UI/BossBar
import UI/BossHealthBar
import UI/BragMeter
import UI/Calculator
import UI/CDTime
import UI/ClickAbilities
import UI/damageFlash
import UI/DragController
import UI/FaceHUD
import UI/FoeStateTracker
import UI/FreeChestTracker
import UI/InfoFloat
import UI/LiveSplit
import UI/MindstoneButton
import UI/MiniMap
import UI/MusicBox
import UI/OkamiroyUtils
import UI/PefWindow
import UI/PlayerStateTracker
import UI/RecordPlayer
import UI/ScrollText
import UI/StealMeter
import UI/ToolBelt
import UI/VisualStatusEffects
import UI/ChiselFiles/Additional Documentation
import UI/ChiselFiles/SetLayer
import UI/FancyUI/colour
import UI/FancyUI/fancyui
import UI/FancyUI/print

import Weapons/ArmorGenerator
import Weapons/EmbueDaggers
import Weapons/LanternTalisman
import Weapons/MajPack
import Weapons/MajVines
import Weapons/PsyCrusher
import Weapons/RecoilKick
import Weapons/RootBats
import Weapons/Scythe
import Weapons/ShockwaveWhip
import Weapons/SpellBook
</font>

<a href=3D"https://stonestoryrpg.com/stonescript/manual.html#"><font color=
=3D"#505050">^Back to top</font></a>
</div>

<font color=3D"#505050">
Copyright Martian Rex, Inc. 2020

</font>
</div>

<br>

</body><div></div><div></div></html>
------MultipartBoundary--2zQGwOQ50sW7AtOWHvAu407FoS4QZbNHj6KTNGMoTa----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-254b5648-4581-4032-b3f5-2c4c01b70250@mhtml.blink

@charset "utf-8";

eg { color: rgb(112, 112, 112); }
------MultipartBoundary--2zQGwOQ50sW7AtOWHvAu407FoS4QZbNHj6KTNGMoTa----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://stonestoryrpg.com/faq-fixed.css

@charset "utf-8";

body { background-color: rgb(21, 21, 21); color: rgb(255, 255, 255); font-f=
amily: monospace; font-size: 14px; padding-top: 0px; margin-top: 0px; }

#content { background-color: rgb(0, 0, 0); margin-left: auto; margin-right:=
 auto; margin-top: 0px; padding-left: 1em; padding-right: 1em; width: 850px=
; }

#logo a img { display: block; margin: auto; }

div { white-space: pre-line; width: 100%; line-height: 1.2; }

#title-separator { background-color: rgb(255, 255, 255); width: 100%; heigh=
t: 1px; margin: 0.65em 0px -0.65em; }

#separator { background-color: rgb(144, 144, 144); width: 100%; height: 1px=
; margin: 0.65em 0px -0.65em; }

f { white-space: pre-wrap; margin-top: 0px; margin-bottom: 0px; line-height=
: 1.2; }

answer { white-space: pre-wrap; margin-top: 0px; margin-bottom: 0px; line-h=
eight: 1.2; color: rgb(187, 187, 187); }

a { color: rgb(176, 176, 176); }

a:hover { color: white; }

a:visited { color: rgb(112, 112, 112); }

table { padding-left: 0em; width: 100%; }

tr { line-height: 1.2; }

td { vertical-align: top; min-width: 11em; white-space: pre-wrap; padding-b=
ottom: 1em; }

.yt { position: relative; padding-bottom: 53.25%; padding-top: 30px; height=
: 0px; overflow: hidden; }

.yt, .yt iframe { max-width: 1633px; max-height: 1080px; }

.yt iframe { position: absolute; top: 0px; left: 0px; width: 100%; height: =
100%; }

#storebuttons { width: 55em; overflow: hidden; margin: 0px auto; }

#boxbutton { height: 5em; border-style: solid; border-color: rgb(187, 187, =
187); border-width: thin; border-radius: 7px; float: left; margin-left: 0.7=
em; margin-right: 0.7em; margin-bottom: 1.4em; }

#googlebutton { background-size: 14em; background-image: url("google_button=
.png"); background-repeat: no-repeat; background-position: center center; w=
idth: 100%; height: 100%; }

#applebutton { background-size: 14em; background-image: url("apple_button.p=
ng"); background-repeat: no-repeat; background-position: center center; wid=
th: 100%; height: 100%; }

#steambutton { background-size: 14em; background-image: url("steam_button.p=
ng"); background-repeat: no-repeat; background-position: center center; wid=
th: 100%; height: 100%; }

#storeimg { width: 600px; display: block; margin-left: auto; margin-right: =
auto; }
------MultipartBoundary--2zQGwOQ50sW7AtOWHvAu407FoS4QZbNHj6KTNGMoTa----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://stonestoryrpg.com/faq-stretch.css

@charset "utf-8";

body { background-color: rgb(0, 0, 0); color: rgb(255, 255, 255); font-fami=
ly: monospace; font-size: 14px; padding-top: 0px; margin-top: 0px; }

#content { background-color: rgb(0, 0, 0); margin-left: auto; margin-right:=
 auto; padding-left: 0em; padding-right: 0em; padding-top: 0em; width: 100%=
; }

#logo a img { display: block; margin: auto; }

div { white-space: pre-line; width: 100%; line-height: 1.2; }

#title-separator { background-color: rgb(255, 255, 255); width: 100%; heigh=
t: 1px; margin: 0.65em 0px -0.65em; }

#separator { background-color: rgb(144, 144, 144); width: 100%; height: 1px=
; margin: 0.65em 0px -0.65em; }

f { white-space: pre-wrap; margin-top: 0px; margin-bottom: 0px; line-height=
: 1.2; }

answer { white-space: pre-wrap; margin-top: 0px; margin-bottom: 0px; line-h=
eight: 1.2; color: rgb(187, 187, 187); }

a { color: rgb(176, 176, 176); }

a:hover { color: white; }

a:visited { color: rgb(112, 112, 112); }

table { padding-left: 0em; width: 100%; }

tr { line-height: 1.2; }

td { vertical-align: top; min-width: 11em; white-space: pre-wrap; padding-b=
ottom: 1em; }

.yt { position: relative; padding-bottom: 53.25%; padding-top: 30px; height=
: 0px; overflow: hidden; }

.yt, .yt iframe { max-width: 1633px; max-height: 1080px; }

.yt iframe { position: absolute; top: 0px; left: 0px; width: 100%; height: =
100%; }

#storebuttons { width: 17.5em; overflow: hidden; margin: 0px auto; }

#boxbutton { height: 5em; border-style: solid; border-color: rgb(187, 187, =
187); border-width: thin; border-radius: 7px; float: left; margin-left: 0.7=
em; margin-right: 0.7em; margin-bottom: 1.4em; }

#googlebutton { background-size: 14.5em; background-image: url("google_butt=
on.png"); background-repeat: no-repeat; background-position: center center;=
 width: 100%; height: 100%; }

#applebutton { background-size: 14.5em; background-image: url("apple_button=
.png"); background-repeat: no-repeat; background-position: center center; w=
idth: 100%; height: 100%; }

#steambutton { background-size: 14.5em; background-image: url("steam_button=
.png"); background-repeat: no-repeat; background-position: center center; w=
idth: 100%; height: 100%; }

#storeimg { width: 100%; display: block; margin-left: auto; margin-right: a=
uto; }
------MultipartBoundary--2zQGwOQ50sW7AtOWHvAu407FoS4QZbNHj6KTNGMoTa----
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://stonestoryrpg.com/capsule_b_231x87.png

iVBORw0KGgoAAAANSUhEUgAAAOcAAABXCAMAAADI4KJnAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
bWFnZVJlYWR5ccllPAAAAGBQTFRFNTU17OzsKSkp////29vbqqqqs7Oz0tLSAAAAw8PDu7u7k5OT
9fX1o6Oj+vr6y8vLioqKFxcXgoKCm5ubenp68fHxc3NzbGxs4eHhS0tLXFxc5ubmVFRUZGRkQUFB
CgoKMBM49AAACyxJREFUeNrsm4mWnaoShpFy2CqiOM+8/1veAsRh93anO5rcTk5qrZz22LbyCdTw
g+Tx3zDyj/Mf5z/OP5CTJj79L3ASt/rlnGIsSyIfhEp7Ypa/n5P9Yk7ZlV4YFmUfZ2LBnIr5r+tP
UQ9gbaGjLXjfh1NKIeTl8SVrBm5S5p67cZIW/G/DORcMwCmudvbsQqrxOvd9fwplu5eMb1gKSuXx
GkqFvJNTNgyY6zKoxmucObDGHPUV9OrOQszYnxprbbOkY5EkSTwaLtlNU0NxGodhTlYuMed+ECQl
Efdx9gzChtIpBeeayyggWG4gw2HW4yT2cCjHypJu+VXPcVSrf8OksISazHGg5/RgXzT11DXqoljc
xSlCiPTNaAj+pTmaAeSHG8Sws0g/W+BF3C3qzEWKTJ1IKvXbKvTxTGDaRwPgjleXHv4qlTdxjtxZ
/mRmVXeFc2xxkpNdu7ooTBk4oTbde48OMWt9lHFwzDBH5xAS3YlOrU9g73q6pbMDPJf3cOaQLHcS
EdSXBi72H2eV4yWNtC5G+VupzfRUBMxgPiT2bCQNZ6sb3Q0Q6/flLJ2PoDiY7+GUyQaXmef8fPxs
TPzkVWtJn/ztjGPTtpuE4HaGM7MTRz8/4WDHlfRWz32REzux2TiTa0FUUkyI/BZRnS1+7jk7YPFu
Pg+T4TRjGjs7XoatGyzmAIz3cHo3cj5MICSRnWAfOZ31aY8aWHbgXPrTgYORe8ZtrN2ePizWw58a
taVvhxg6TDPlXvRntvMMT/25cLpQNd1q801+qFnCim7ddIGzD6CwbUpgceJkOM5PgGAtE3F+zq84
I84+UUR/lXOuLF0D7pUivbftRgvtrWhqwWhPNAq3bi/D/EQYzt46Y93ZE8Mcyra5n8Q9nDha205l
mCO75m6JD+Drp4uc20RGJMB7ofxTVHkCH4IpQa0yPpoPUKkXLAgDnfGJMcVZrVqSAiQzhiLRlaFz
0/zE0+jfkrr2YI1aP5nGIyekNaareCs7MmSPvjeJPeWDE6rcAWYFUVzn6KoclQLIOMSrQwwkTYA5
hT8tdUCgckX1Vym9q14hPlN+zfGuFSzoZfniKlnYbcOlNblrmOnbyzyszDWpThiECwwfX6pAzhk3
s7mPlkJ2SAtyX10m+yyOs+5iRBF5kDRJiEEvyvdzqo+jyI/79RQtIzQ/p/bZyvB/uhh/5maGi95T
F8U9/YZ6gtSVFpaN/wEd7E/R+2Tmn9r4F3GKFk4t+4s4H/PUnxn9mzivGiUEH7LzRfQ7cMoXR1c8
bhm0g9O6hetSWw61zf+fU2STbWC+XXa6UiC79/kv9TEFULkC/2Y6dWyTbMwxd7JdfhIBBRveJRMi
xgS3I6RPtqrxW+jUsuJLN1KH7fPds3K7Z84b0N4BsyAnfG5VAOq+6E86dx3dVeaLuIunySpjy1XR
vs7ZwyA+cqqasTy5RQnD/EYGa8dVBtI6NZn7AUIyK1sX0DA3dF03LBYJiXoqNtMHiaMgSLHMmfUJ
D18o0UfJZc5wfdcHTuRnVnDuS9WBYqo7q0uF4lyndm1v1zppn8LA5VAZpWeZDMJji05dmYWOWcfm
rktNkJ7wXWrDVz2ao6ucM3DykvORLIq10sWrTClz4GR2HJ5qDiXnx5In32cZ5ldYj0KQNVMTY+3l
Ce0L44RB4YKbxH6FI4JkmKuEmarKYyz1wvIqZwLp4zUnXRTrxLQwNK98Ea9OO1QVslHTz7ONnrSs
MweCWllOTFWGmOZGXQAs3yVhKq0UjR7MTWUr/hxOQ/6nOdHl1yecstAPOiaBuRWRTmfo5OrCcgjj
bp2NRz+E7nf1ZKMDqbAt4cnu7ckUjGOfGfe+7m/pkbPmTJ5w4pBWvUYPnImdheeBv/OD1uH6pYgT
/XYLMziE3XENsodBUmOHSh2oBvIVzsRTFjEeqZ++6ZkUNk/2zEkrLXwEH/vz0bwN/KJr4sTFdGHx
ph84q3znvJf1FOR8GiMRV2tnXXXenS85K65NrbUpi7RTrXYK0zOnCPSLLPlHvXg6DfxyXeMsKwh/
rFOXdoIi51NY7lsolLTcki9xNsoTNJnDM3VU6tHiLas4rzl9PpqJslq8XN1V/qne12wRazjTqYud
E1ji0EfOhw/tTJx3udQn5yc2oH+cc4ZmgWReZ2hqJ9Bpf9bplkclJ5ykAmeVZkMIyBnnNICXbXrw
z/vbfM2FXs5PtgiTFnQLJqfzc/ZhWF6dbK0cSSNwl18riUvJucswkgm3b+wFp/TVerZ3Ob+V4WHt
+ZmTrGCze8TE7K4+12/dycBxyKTN7VlM6VynDouIzgi5ipRyjpjpLkFpN0CDPw47MSYse9zuMmfP
qv2Fz5zl5os7dtCKRQrdG53aSb0idNflMp3WMddtlWarXyxGTRgwDWwVhoodftviKadFC3YRS2KO
4l3eb4J3OdQkT5xiYFt2V0O7C7sTD8RZ9QmVa0Y5z7aBM5psKsg683ekMDp1lZnixHccZxjwP04V
9Idsue0u12Xoyg7q3RNnvrkd9cRyH3BO1/bl6JVkrLMsb+b9q6DdOI7ztkNGzHhRM9prKNls92dd
u3r4C5yl3drxknNmbDrExe0wPl3vsDq1/MzGsh9egkEnIJfrbJo+VZgHTnFeaI+s+j0q7jjw+rqe
MPKncnnPiZ4mPMHsHMh/A2NdlljMFJ24yIlRrHicchbbKutz8upALn85JmVLatL2V/tzip6uEskG
3tXnsuXvGLTU7KsK02j8OU6RFV9bypJH+11KuxDHnY9f5fyy1d7B5sd3si9xihd9uNfJDlb+sZzU
e267zHdje6ybvX11pLwa8KeTwJ7+9Pz4Smv8bTePfZx7V7fJKcsXmze5qF5OZtMxatDaG8Dx475c
NnbeySk4+6D1xHy4x+FMLbfGWGVGiSz57uQunc2MqqT1jvB2zhrcD/fEWvCe4KE2+W3GzZ6d8jDh
K6t+Ke26LeJC61H3c7rP6YIZy+FN4YFmmNSospKojbm1OUdrgIRgRTqhl+Pm+QUDVlIhBS3ZL+Ac
X+6jGyu4KzTVVugSuQPpctcRTA0uabxsp1Il6TIpRfkLOCOIXp0ObtuIUK67M2Vg9WlpOXXB6pRa
YLVn8NywbUS+iRNr0JcJZA6OvJsTWaoPnDLTu45nvivk5Zj0N3NmfDjJ1nl9G+dS3sztspLwzJlh
xOaHwuGzqelnOTFSntRYu/Wl6/2pgr8Yw5Vlx0lSJRBKj/9UFfRZzqniJ8rADFV3EydPM7XvcoBV
7FGcuZFPPIBAKOUR+l/HKf1zOS2A5CZOa0PUPzZOf+r7Ui2AqkUIxWm8rZY2n+TNy5yd82Z9D1px
E+eQpgGmOpF47DhtmpCqbExxmkWnKTL76yJyI2f8xn+LdX/G5fkZC0FwfG7Le4rTcdHSqDQbciMO
OiuU62danxrGn+Okwbtvj+I3uxC+7m8xeML6ZbjiLDAf2iJJxhcNsfOLIgl2GvcNnA133tyNAOtv
jJ8YqdeltJ2/tTOI7b7FUV9j3Rg/pfdWBZbRLZ5ozRNitn6g9JFTrSbbpFDvtRL3cXYc3oaO/ton
Hh/yod1o/MjZVZjaL3DyXs5s5wFfTl/3ulBLMVFX9YoOyYNac5EPSUipPtogZB88Yg480F8F0LK9
k5O40PyoK656oj4YKrX5xCxwFBwPM9kM5iTazgGowQpVi05Y/fZGzgbcH/g0wi99g7WMRm3Llj+9
Y2W3c2rv6ES3SW5pc5sfkskPS6+L39Q99Oa+ebexj+IRxWRvtWOv0a5MfN8rmpnep4PJOvqhFtsF
d0SWb6Jr/sn2j/Mf5z/O72v/E2AAsW23A2oLRtgAAAAASUVORK5CYII=

------MultipartBoundary--2zQGwOQ50sW7AtOWHvAu407FoS4QZbNHj6KTNGMoTa------
